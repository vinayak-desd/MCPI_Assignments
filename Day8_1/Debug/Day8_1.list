
Day8_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ba0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08001d30  08001d30  00002d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f3c  08001f3c  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001f3c  08001f3c  00002f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f44  08001f44  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f44  08001f44  00002f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f48  08001f48  00002f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001f4c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001519  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000071c  00000000  00000000  00004597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fb  00000000  00000000  00004e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018548  00000000  00000000  00004f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fe3  00000000  00000000  0001d473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdd5  00000000  00000000  0001f456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ab22b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c44  00000000  00000000  000ab270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000abeb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  000abed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001d18 	.word	0x08001d18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001d18 	.word	0x08001d18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b0b4      	sub	sp, #208	@ 0xd0
 8000284:	af00      	add	r7, sp, #0
	char str[100] ;
	int choice;
	char str2 [100];
	SystemInit();
 8000286:	f000 fba9 	bl	80009dc <SystemInit>
	UartInit(BAUD_9600);
 800028a:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800028e:	f000 fa93 	bl	80007b8 <UartInit>
	EEPROM_Init();
 8000292:	f000 f897 	bl	80003c4 <EEPROM_Init>
	do
		{
			sprintf(str, "Menu:\n\r1. Write String to EEPROM\n\r2. Read String from EEPROM\n\n\r");
 8000296:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800029a:	4941      	ldr	r1, [pc, #260]	@ (80003a0 <main+0x120>)
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fbfd 	bl	8000a9c <siprintf>
			UartPuts(str);
 80002a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fb20 	bl	80008ec <UartPuts>

			sprintf(str, "Select your choice: ");
 80002ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80002b0:	493c      	ldr	r1, [pc, #240]	@ (80003a4 <main+0x124>)
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fbf2 	bl	8000a9c <siprintf>
			UartPuts(str);
 80002b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fb15 	bl	80008ec <UartPuts>
			UartGets(str);
 80002c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fb2c 	bl	8000924 <UartGets>
			sscanf(str, "%d", &choice);
 80002cc:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80002d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80002d4:	4934      	ldr	r1, [pc, #208]	@ (80003a8 <main+0x128>)
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fc00 	bl	8000adc <siscanf>
			switch(choice) {
 80002dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d030      	beq.n	8000344 <main+0xc4>
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	dc4a      	bgt.n	800037c <main+0xfc>
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d002      	beq.n	80002f0 <main+0x70>
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d00c      	beq.n	8000308 <main+0x88>
 80002ee:	e045      	b.n	800037c <main+0xfc>
				case 0:
						sprintf(str, "\n\rThank You\n\r");
 80002f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80002f4:	492d      	ldr	r1, [pc, #180]	@ (80003ac <main+0x12c>)
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fbd0 	bl	8000a9c <siprintf>
						UartPuts(str);
 80002fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000300:	4618      	mov	r0, r3
 8000302:	f000 faf3 	bl	80008ec <UartPuts>
						break;
 8000306:	e044      	b.n	8000392 <main+0x112>
				case 1:

						sprintf(str, "Enter the string\n\r");
 8000308:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800030c:	4928      	ldr	r1, [pc, #160]	@ (80003b0 <main+0x130>)
 800030e:	4618      	mov	r0, r3
 8000310:	f000 fbc4 	bl	8000a9c <siprintf>
						UartPuts(str);
 8000314:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fae7 	bl	80008ec <UartPuts>
						UartGets(str);
 800031e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fafe 	bl	8000924 <UartGets>
						sscanf(str, "%s", str2);
 8000328:	1d3a      	adds	r2, r7, #4
 800032a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800032e:	4921      	ldr	r1, [pc, #132]	@ (80003b4 <main+0x134>)
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fbd3 	bl	8000adc <siscanf>
						EEPROM_Write(0x0020, (uint8_t*)str2, 32);
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2220      	movs	r2, #32
 800033a:	4619      	mov	r1, r3
 800033c:	2020      	movs	r0, #32
 800033e:	f000 f852 	bl	80003e6 <EEPROM_Write>
						break;
 8000342:	e026      	b.n	8000392 <main+0x112>

				case 2:
						sprintf(str, "Reading the String: \n\r");
 8000344:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000348:	491b      	ldr	r1, [pc, #108]	@ (80003b8 <main+0x138>)
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fba6 	bl	8000a9c <siprintf>
						EEPROM_Read(0x0020, (uint8_t*)str2, 32);
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2220      	movs	r2, #32
 8000354:	4619      	mov	r1, r3
 8000356:	2020      	movs	r0, #32
 8000358:	f000 f877 	bl	800044a <EEPROM_Read>
						UartPuts(str2);
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fac4 	bl	80008ec <UartPuts>
						sprintf(str, "\n\r");
 8000364:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000368:	4914      	ldr	r1, [pc, #80]	@ (80003bc <main+0x13c>)
 800036a:	4618      	mov	r0, r3
 800036c:	f000 fb96 	bl	8000a9c <siprintf>
						UartPuts(str);
 8000370:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fab9 	bl	80008ec <UartPuts>
						break;
 800037a:	e00a      	b.n	8000392 <main+0x112>

				default:
						sprintf(str, "Invalid choice\n");
 800037c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000380:	490f      	ldr	r1, [pc, #60]	@ (80003c0 <main+0x140>)
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fb8a 	bl	8000a9c <siprintf>
						UartPuts(str);
 8000388:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800038c:	4618      	mov	r0, r3
 800038e:	f000 faad 	bl	80008ec <UartPuts>
			}
		}while(choice != 0);
 8000392:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000394:	2b00      	cmp	r3, #0
 8000396:	f47f af7e 	bne.w	8000296 <main+0x16>

		while(1);
 800039a:	bf00      	nop
 800039c:	e7fd      	b.n	800039a <main+0x11a>
 800039e:	bf00      	nop
 80003a0:	08001d30 	.word	0x08001d30
 80003a4:	08001d70 	.word	0x08001d70
 80003a8:	08001d88 	.word	0x08001d88
 80003ac:	08001d8c 	.word	0x08001d8c
 80003b0:	08001d9c 	.word	0x08001d9c
 80003b4:	08001db0 	.word	0x08001db0
 80003b8:	08001db4 	.word	0x08001db4
 80003bc:	08001dcc 	.word	0x08001dcc
 80003c0:	08001dd0 	.word	0x08001dd0

080003c4 <EEPROM_Init>:
 *      Author: Vinayak
 */

#include "myeeprom.h"

void EEPROM_Init(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
	int ret;
	I2CInit();
 80003ca:	f000 f965 	bl	8000698 <I2CInit>
	I2CStart();
 80003ce:	f000 f8a3 	bl	8000518 <I2CStart>
	ret = I2CIsDeviceReady(EEPROM_W);
 80003d2:	20a0      	movs	r0, #160	@ 0xa0
 80003d4:	f000 f942 	bl	800065c <I2CIsDeviceReady>
 80003d8:	6078      	str	r0, [r7, #4]
	I2CStop();
 80003da:	f000 f8b9 	bl	8000550 <I2CStop>
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <EEPROM_Write>:

void EEPROM_Write(uint16_t addr, uint8_t byte[], uint8_t n) {
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b084      	sub	sp, #16
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	4603      	mov	r3, r0
 80003ee:	6039      	str	r1, [r7, #0]
 80003f0:	80fb      	strh	r3, [r7, #6]
 80003f2:	4613      	mov	r3, r2
 80003f4:	717b      	strb	r3, [r7, #5]
	uint8_t high = addr >> 8, low = addr & 0xFF;
 80003f6:	88fb      	ldrh	r3, [r7, #6]
 80003f8:	0a1b      	lsrs	r3, r3, #8
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	72fb      	strb	r3, [r7, #11]
 80003fe:	88fb      	ldrh	r3, [r7, #6]
 8000400:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 8000402:	f000 f889 	bl	8000518 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 8000406:	20a0      	movs	r0, #160	@ 0xa0
 8000408:	f000 f8b8 	bl	800057c <I2CSendSlaveAddress>
	I2CSendData(high);
 800040c:	7afb      	ldrb	r3, [r7, #11]
 800040e:	4618      	mov	r0, r3
 8000410:	f000 f8ce 	bl	80005b0 <I2CSendData>
	I2CSendData(low);
 8000414:	7abb      	ldrb	r3, [r7, #10]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f8ca 	bl	80005b0 <I2CSendData>
	for(int i=0; i<n; i++)
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	e009      	b.n	8000436 <EEPROM_Write+0x50>
		I2CSendData(byte[i]);
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	683a      	ldr	r2, [r7, #0]
 8000426:	4413      	add	r3, r2
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f8c0 	bl	80005b0 <I2CSendData>
	for(int i=0; i<n; i++)
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	3301      	adds	r3, #1
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	797b      	ldrb	r3, [r7, #5]
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	429a      	cmp	r2, r3
 800043c:	dbf1      	blt.n	8000422 <EEPROM_Write+0x3c>
	I2CStop();
 800043e:	f000 f887 	bl	8000550 <I2CStop>
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <EEPROM_Read>:

void EEPROM_Read(uint16_t addr, uint8_t byte[], uint8_t n) {
 800044a:	b590      	push	{r4, r7, lr}
 800044c:	b085      	sub	sp, #20
 800044e:	af00      	add	r7, sp, #0
 8000450:	4603      	mov	r3, r0
 8000452:	6039      	str	r1, [r7, #0]
 8000454:	80fb      	strh	r3, [r7, #6]
 8000456:	4613      	mov	r3, r2
 8000458:	717b      	strb	r3, [r7, #5]
	int i;
	uint8_t high = addr >> 8, low = addr & 0xFF;
 800045a:	88fb      	ldrh	r3, [r7, #6]
 800045c:	0a1b      	lsrs	r3, r3, #8
 800045e:	b29b      	uxth	r3, r3
 8000460:	72fb      	strb	r3, [r7, #11]
 8000462:	88fb      	ldrh	r3, [r7, #6]
 8000464:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 8000466:	f000 f857 	bl	8000518 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 800046a:	20a0      	movs	r0, #160	@ 0xa0
 800046c:	f000 f886 	bl	800057c <I2CSendSlaveAddress>
	I2CSendData(high);
 8000470:	7afb      	ldrb	r3, [r7, #11]
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f89c 	bl	80005b0 <I2CSendData>
	I2CSendData(low);
 8000478:	7abb      	ldrb	r3, [r7, #10]
 800047a:	4618      	mov	r0, r3
 800047c:	f000 f898 	bl	80005b0 <I2CSendData>
	I2CRepeatStart();
 8000480:	f000 f860 	bl	8000544 <I2CRepeatStart>
	I2CSendSlaveAddress(EEPROM_R);
 8000484:	20a1      	movs	r0, #161	@ 0xa1
 8000486:	f000 f879 	bl	800057c <I2CSendSlaveAddress>
	for(i=0; i<n-1; i++)
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	e009      	b.n	80004a4 <EEPROM_Read+0x5a>
		byte[i] = I2CRecvDataAck();
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	683a      	ldr	r2, [r7, #0]
 8000494:	18d4      	adds	r4, r2, r3
 8000496:	f000 f8a9 	bl	80005ec <I2CRecvDataAck>
 800049a:	4603      	mov	r3, r0
 800049c:	7023      	strb	r3, [r4, #0]
	for(i=0; i<n-1; i++)
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	3301      	adds	r3, #1
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	797b      	ldrb	r3, [r7, #5]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	dbf0      	blt.n	8000490 <EEPROM_Read+0x46>
	byte[i] = I2CRecvDataNAck();
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	683a      	ldr	r2, [r7, #0]
 80004b2:	18d4      	adds	r4, r2, r3
 80004b4:	f000 f8b6 	bl	8000624 <I2CRecvDataNAck>
 80004b8:	4603      	mov	r3, r0
 80004ba:	7023      	strb	r3, [r4, #0]
	I2CStop();
 80004bc:	f000 f848 	bl	8000550 <I2CStop>
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd90      	pop	{r4, r7, pc}

080004c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80004d0:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <DelayMs+0x44>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80004d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <DelayMs+0x48>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <DelayMs+0x4c>)
 80004dc:	fba2 2303 	umull	r2, r3, r2, r3
 80004e0:	099b      	lsrs	r3, r3, #6
 80004e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	fb02 f303 	mul.w	r3, r2, r3
 80004ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80004ee:	bf00      	nop
 80004f0:	4b06      	ldr	r3, [pc, #24]	@ (800050c <DelayMs+0x44>)
 80004f2:	685a      	ldr	r2, [r3, #4]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	1ad2      	subs	r2, r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d3f8      	bcc.n	80004f0 <DelayMs+0x28>
}
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e0001000 	.word	0xe0001000
 8000510:	20000000 	.word	0x20000000
 8000514:	10624dd3 	.word	0x10624dd3

08000518 <I2CStart>:
 *      Author: Vinayak
 */

#include "myi2c.h"

void I2CStart() {
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 800051c:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <I2CStart+0x28>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <I2CStart+0x28>)
 8000522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000526:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000528:	bf00      	nop
 800052a:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <I2CStart+0x28>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f9      	beq.n	800052a <I2CStart+0x12>
}
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40005400 	.word	0x40005400

08000544 <I2CRepeatStart>:

void I2CRepeatStart() {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	I2CStart();
 8000548:	f7ff ffe6 	bl	8000518 <I2CStart>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <I2CStop>:

void I2CStop() {
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000554:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <I2CStop+0x28>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <I2CStop+0x28>)
 800055a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800055e:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000560:	bf00      	nop
 8000562:	4b05      	ldr	r3, [pc, #20]	@ (8000578 <I2CStop+0x28>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f9      	beq.n	8000562 <I2CStop+0x12>
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40005400 	.word	0x40005400

0800057c <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = slaveaddr;
 8000586:	4a09      	ldr	r2, [pc, #36]	@ (80005ac <I2CSendSlaveAddress+0x30>)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR))
 800058c:	bf00      	nop
 800058e:	4b07      	ldr	r3, [pc, #28]	@ (80005ac <I2CSendSlaveAddress+0x30>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f9      	beq.n	800058e <I2CSendSlaveAddress+0x12>
    	;
    (void)I2C1->SR1;
 800059a:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <I2CSendSlaveAddress+0x30>)
 800059c:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 800059e:	4b03      	ldr	r3, [pc, #12]	@ (80005ac <I2CSendSlaveAddress+0x30>)
 80005a0:	699b      	ldr	r3, [r3, #24]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40005400 	.word	0x40005400

080005b0 <I2CSendData>:

void I2CSendData(uint8_t val)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    while (!(I2C1->SR1 & I2C_SR1_TXE))
 80005ba:	bf00      	nop
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <I2CSendData+0x38>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0f9      	beq.n	80005bc <I2CSendData+0xc>
    	;
    I2C1->DR = val;
 80005c8:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <I2CSendData+0x38>)
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF))
 80005ce:	bf00      	nop
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <I2CSendData+0x38>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d0f9      	beq.n	80005d0 <I2CSendData+0x20>
    	;
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40005400 	.word	0x40005400

080005ec <I2CRecvDataAck>:

uint8_t I2CRecvDataAck(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 |= I2C_CR1_ACK | I2C_CR1_POS;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <I2CRecvDataAck+0x34>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000620 <I2CRecvDataAck+0x34>)
 80005f8:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80005fc:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_RXNE))
 80005fe:	bf00      	nop
 8000600:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <I2CRecvDataAck+0x34>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0f9      	beq.n	8000600 <I2CRecvDataAck+0x14>
		;
	val = (uint8_t)I2C1->DR;
 800060c:	4b04      	ldr	r3, [pc, #16]	@ (8000620 <I2CRecvDataAck+0x34>)
 800060e:	691b      	ldr	r3, [r3, #16]
 8000610:	71fb      	strb	r3, [r7, #7]
	return val;
 8000612:	79fb      	ldrb	r3, [r7, #7]
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40005400 	.word	0x40005400

08000624 <I2CRecvDataNAck>:

uint8_t I2CRecvDataNAck(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 &= ~(I2C_CR1_ACK | I2C_CR1_POS);
 800062a:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <I2CRecvDataNAck+0x34>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0a      	ldr	r2, [pc, #40]	@ (8000658 <I2CRecvDataNAck+0x34>)
 8000630:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000634:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_RXNE))
 8000636:	bf00      	nop
 8000638:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <I2CRecvDataNAck+0x34>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0f9      	beq.n	8000638 <I2CRecvDataNAck+0x14>
		;
	val = I2C1->DR;
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <I2CRecvDataNAck+0x34>)
 8000646:	691b      	ldr	r3, [r3, #16]
 8000648:	71fb      	strb	r3, [r7, #7]
	return val;
 800064a:	79fb      	ldrb	r3, [r7, #7]
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40005400 	.word	0x40005400

0800065c <I2CIsDeviceReady>:

int I2CIsDeviceReady(uint8_t slaveaddr)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
    slaveaddr &= ~BV(0);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f023 0301 	bic.w	r3, r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = slaveaddr;
 800066e:	4a09      	ldr	r2, [pc, #36]	@ (8000694 <I2CIsDeviceReady+0x38>)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR))
 8000674:	bf00      	nop
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <I2CIsDeviceReady+0x38>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <I2CIsDeviceReady+0x1a>
    	;
    (void)I2C1->SR2;
 8000682:	4b04      	ldr	r3, [pc, #16]	@ (8000694 <I2CIsDeviceReady+0x38>)
 8000684:	699b      	ldr	r3, [r3, #24]
	return 1;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40005400 	.word	0x40005400

08000698 <I2CInit>:

void I2CInit()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800069c:	4b43      	ldr	r3, [pc, #268]	@ (80007ac <I2CInit+0x114>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	4a42      	ldr	r2, [pc, #264]	@ (80007ac <I2CInit+0x114>)
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 80006a8:	2032      	movs	r0, #50	@ 0x32
 80006aa:	f7ff ff0d 	bl	80004c8 <DelayMs>

    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80006ae:	4b3f      	ldr	r3, [pc, #252]	@ (80007ac <I2CInit+0x114>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a3e      	ldr	r2, [pc, #248]	@ (80007ac <I2CInit+0x114>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2);
 80006ba:	4b3d      	ldr	r3, [pc, #244]	@ (80007b0 <I2CInit+0x118>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a3c      	ldr	r2, [pc, #240]	@ (80007b0 <I2CInit+0x118>)
 80006c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80006c4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2);
 80006c6:	4b3a      	ldr	r3, [pc, #232]	@ (80007b0 <I2CInit+0x118>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a39      	ldr	r2, [pc, #228]	@ (80007b0 <I2CInit+0x118>)
 80006cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006d0:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);
 80006d2:	4b37      	ldr	r3, [pc, #220]	@ (80007b0 <I2CInit+0x118>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4a36      	ldr	r2, [pc, #216]	@ (80007b0 <I2CInit+0x118>)
 80006d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006dc:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2);
 80006de:	4b34      	ldr	r3, [pc, #208]	@ (80007b0 <I2CInit+0x118>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4a33      	ldr	r2, [pc, #204]	@ (80007b0 <I2CInit+0x118>)
 80006e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80006e8:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2);
 80006ea:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <I2CInit+0x118>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a30      	ldr	r2, [pc, #192]	@ (80007b0 <I2CInit+0x118>)
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2);
 80006f6:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <I2CInit+0x118>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a2d      	ldr	r2, [pc, #180]	@ (80007b0 <I2CInit+0x118>)
 80006fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000700:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);
 8000702:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <I2CInit+0x118>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <I2CInit+0x118>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800070c:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2);
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <I2CInit+0x118>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	4a27      	ldr	r2, [pc, #156]	@ (80007b0 <I2CInit+0x118>)
 8000714:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000718:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos);
 800071a:	4b25      	ldr	r3, [pc, #148]	@ (80007b0 <I2CInit+0x118>)
 800071c:	6a1b      	ldr	r3, [r3, #32]
 800071e:	4a24      	ldr	r2, [pc, #144]	@ (80007b0 <I2CInit+0x118>)
 8000720:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000724:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos);
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <I2CInit+0x118>)
 8000728:	6a1b      	ldr	r3, [r3, #32]
 800072a:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <I2CInit+0x118>)
 800072c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000730:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000732:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <I2CInit+0x114>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000736:	4a1d      	ldr	r2, [pc, #116]	@ (80007ac <I2CInit+0x114>)
 8000738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800073c:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 800073e:	2032      	movs	r0, #50	@ 0x32
 8000740:	f7ff fec2 	bl	80004c8 <DelayMs>
    I2C1->CR1 = I2C_CR1_SWRST;
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <I2CInit+0x11c>)
 8000746:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800074a:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 800074c:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <I2CInit+0x11c>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN);
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <I2CInit+0x11c>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <I2CInit+0x11c>)
 8000758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800075c:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos);
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <I2CInit+0x11c>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <I2CInit+0x11c>)
 8000764:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000768:	61d3      	str	r3, [r2, #28]

    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <I2CInit+0x11c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <I2CInit+0x11c>)
 8000770:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000774:	6013      	str	r3, [r2, #0]

    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos);
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <I2CInit+0x11c>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <I2CInit+0x11c>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <I2CInit+0x11c>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <I2CInit+0x11c>)
 8000788:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800078c:	61d3      	str	r3, [r2, #28]

    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos);
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <I2CInit+0x11c>)
 8000790:	6a1b      	ldr	r3, [r3, #32]
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <I2CInit+0x11c>)
 8000794:	f043 0311 	orr.w	r3, r3, #17
 8000798:	6213      	str	r3, [r2, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <I2CInit+0x11c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a05      	ldr	r2, [pc, #20]	@ (80007b4 <I2CInit+0x11c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6013      	str	r3, [r2, #0]
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020400 	.word	0x40020400
 80007b4:	40005400 	.word	0x40005400

080007b8 <UartInit>:
 *      Author: vinayak
 */

#include "myuart.h"
void UartInit(uint32_t baud)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 80007c0:	4b31      	ldr	r3, [pc, #196]	@ (8000888 <UartInit+0xd0>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c4:	4a30      	ldr	r2, [pc, #192]	@ (8000888 <UartInit+0xd0>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 80007cc:	4b2f      	ldr	r3, [pc, #188]	@ (800088c <UartInit+0xd4>)
 80007ce:	6a1b      	ldr	r3, [r3, #32]
 80007d0:	4a2e      	ldr	r2, [pc, #184]	@ (800088c <UartInit+0xd4>)
 80007d2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80007d6:	6213      	str	r3, [r2, #32]

	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 80007d8:	4b2c      	ldr	r3, [pc, #176]	@ (800088c <UartInit+0xd4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a2b      	ldr	r2, [pc, #172]	@ (800088c <UartInit+0xd4>)
 80007de:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80007e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN *2));
 80007e4:	4b29      	ldr	r3, [pc, #164]	@ (800088c <UartInit+0xd4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a28      	ldr	r2, [pc, #160]	@ (800088c <UartInit+0xd4>)
 80007ea:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80007ee:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN *2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80007f0:	4b26      	ldr	r3, [pc, #152]	@ (800088c <UartInit+0xd4>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	4a25      	ldr	r2, [pc, #148]	@ (800088c <UartInit+0xd4>)
 80007f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80007fa:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN *2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80007fc:	4b23      	ldr	r3, [pc, #140]	@ (800088c <UartInit+0xd4>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	4a22      	ldr	r2, [pc, #136]	@ (800088c <UartInit+0xd4>)
 8000802:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000806:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000808:	4b20      	ldr	r3, [pc, #128]	@ (800088c <UartInit+0xd4>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <UartInit+0xd4>)
 800080e:	f023 030c 	bic.w	r3, r3, #12
 8000812:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000814:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <UartInit+0xd0>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	4a1b      	ldr	r2, [pc, #108]	@ (8000888 <UartInit+0xd0>)
 800081a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800081e:	6413      	str	r3, [r2, #64]	@ 0x40

	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <UartInit+0xd8>)
 8000822:	220c      	movs	r2, #12
 8000824:	60da      	str	r2, [r3, #12]

	USART2->CR2 = 0x00000000;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <UartInit+0xd8>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
	USART2->CR3 = 0x00000000;
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <UartInit+0xd8>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]

	switch(baud)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000838:	d016      	beq.n	8000868 <UartInit+0xb0>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000840:	d816      	bhi.n	8000870 <UartInit+0xb8>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000848:	d004      	beq.n	8000854 <UartInit+0x9c>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000850:	d005      	beq.n	800085e <UartInit+0xa6>
 8000852:	e00d      	b.n	8000870 <UartInit+0xb8>
	{
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000854:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <UartInit+0xd8>)
 8000856:	f240 6283 	movw	r2, #1667	@ 0x683
 800085a:	609a      	str	r2, [r3, #8]
			break;
 800085c:	e008      	b.n	8000870 <UartInit+0xb8>

		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <UartInit+0xd8>)
 8000860:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000864:	609a      	str	r2, [r3, #8]
			break;
 8000866:	e003      	b.n	8000870 <UartInit+0xb8>

		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <UartInit+0xd8>)
 800086a:	228b      	movs	r2, #139	@ 0x8b
 800086c:	609a      	str	r2, [r3, #8]
			break;
 800086e:	bf00      	nop

	}
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <UartInit+0xd8>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a06      	ldr	r2, [pc, #24]	@ (8000890 <UartInit+0xd8>)
 8000876:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800087a:	60d3      	str	r3, [r2, #12]

}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	40004400 	.word	0x40004400

08000894 <UartPutch>:

void UartPutch(uint8_t ch)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 800089e:	bf00      	nop
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <UartPutch+0x28>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0f9      	beq.n	80008a0 <UartPutch+0xc>
		;
	USART2->DR = ch;
 80008ac:	4a03      	ldr	r2, [pc, #12]	@ (80008bc <UartPutch+0x28>)
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	6053      	str	r3, [r2, #4]

}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	40004400 	.word	0x40004400

080008c0 <UartGetch>:

uint8_t UartGetch(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 80008c6:	bf00      	nop
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <UartGetch+0x28>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f003 0320 	and.w	r3, r3, #32
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f9      	beq.n	80008c8 <UartGetch+0x8>
		;

	char ch = USART2->DR;
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <UartGetch+0x28>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	71fb      	strb	r3, [r7, #7]
	return ch;
 80008da:	79fb      	ldrb	r3, [r7, #7]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40004400 	.word	0x40004400

080008ec <UartPuts>:

void UartPuts(char str[])
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i] != '\0'; i++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	e009      	b.n	800090e <UartPuts+0x22>
		UartPutch(str[i]);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ffc6 	bl	8000894 <UartPutch>
	for(i=0; str[i] != '\0'; i++)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4413      	add	r3, r2
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1ef      	bne.n	80008fa <UartPuts+0xe>
}
 800091a:	bf00      	nop
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <UartGets>:

void UartGets(char str[])
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
	char ch;
	do
	{
		ch = UartGetch();
 8000930:	f7ff ffc6 	bl	80008c0 <UartGetch>
 8000934:	4603      	mov	r3, r0
 8000936:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	7afa      	ldrb	r2, [r7, #11]
 8000940:	701a      	strb	r2, [r3, #0]
		i++;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3301      	adds	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
	}while(ch != '\r');
 8000948:	7afb      	ldrb	r3, [r7, #11]
 800094a:	2b0d      	cmp	r3, #13
 800094c:	d1f0      	bne.n	8000930 <UartGets+0xc>

	str[i] = '\n';
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4413      	add	r3, r2
 8000954:	220a      	movs	r2, #10
 8000956:	701a      	strb	r2, [r3, #0]
	i++;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	3301      	adds	r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]

}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000978:	4a14      	ldr	r2, [pc, #80]	@ (80009cc <_sbrk+0x5c>)
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <_sbrk+0x60>)
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d102      	bne.n	8000992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <_sbrk+0x64>)
 800098e:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <_sbrk+0x68>)
 8000990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	429a      	cmp	r2, r3
 800099e:	d207      	bcs.n	80009b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a0:	f000 f8c8 	bl	8000b34 <__errno>
 80009a4:	4603      	mov	r3, r0
 80009a6:	220c      	movs	r2, #12
 80009a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ae:	e009      	b.n	80009c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b6:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	4a05      	ldr	r2, [pc, #20]	@ (80009d4 <_sbrk+0x64>)
 80009c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20020000 	.word	0x20020000
 80009d0:	00000400 	.word	0x00000400
 80009d4:	20000070 	.word	0x20000070
 80009d8:	200001c0 	.word	0x200001c0

080009dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  DWT_Init();
 80009e0:	f000 f802 	bl	80009e8 <DWT_Init>
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <DWT_Init+0x58>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	4a13      	ldr	r2, [pc, #76]	@ (8000a40 <DWT_Init+0x58>)
 80009f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80009f6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <DWT_Init+0x58>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	4a10      	ldr	r2, [pc, #64]	@ (8000a40 <DWT_Init+0x58>)
 80009fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a02:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <DWT_Init+0x5c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0e      	ldr	r2, [pc, #56]	@ (8000a44 <DWT_Init+0x5c>)
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <DWT_Init+0x5c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0b      	ldr	r2, [pc, #44]	@ (8000a44 <DWT_Init+0x5c>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <DWT_Init+0x5c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000a22:	bf00      	nop
    __ASM volatile ("NOP");
 8000a24:	bf00      	nop
    __ASM volatile ("NOP");
 8000a26:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <DWT_Init+0x5c>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	bf0c      	ite	eq
 8000a30:	2301      	moveq	r3, #1
 8000a32:	2300      	movne	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000edf0 	.word	0xe000edf0
 8000a44:	e0001000 	.word	0xe0001000

08000a48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a48:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a4c:	f7ff ffc6 	bl	80009dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a52:	490d      	ldr	r1, [pc, #52]	@ (8000a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a54:	4a0d      	ldr	r2, [pc, #52]	@ (8000a8c <LoopForever+0xe>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a68:	4c0a      	ldr	r4, [pc, #40]	@ (8000a94 <LoopForever+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a76:	f000 f863 	bl	8000b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7a:	f7ff fc01 	bl	8000280 <main>

08000a7e <LoopForever>:

LoopForever:
  b LoopForever
 8000a7e:	e7fe      	b.n	8000a7e <LoopForever>
  ldr   r0, =_estack
 8000a80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000a8c:	08001f4c 	.word	0x08001f4c
  ldr r2, =_sbss
 8000a90:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000a94:	200001bc 	.word	0x200001bc

08000a98 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC_IRQHandler>
	...

08000a9c <siprintf>:
 8000a9c:	b40e      	push	{r1, r2, r3}
 8000a9e:	b500      	push	{lr}
 8000aa0:	b09c      	sub	sp, #112	@ 0x70
 8000aa2:	ab1d      	add	r3, sp, #116	@ 0x74
 8000aa4:	9002      	str	r0, [sp, #8]
 8000aa6:	9006      	str	r0, [sp, #24]
 8000aa8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000aac:	4809      	ldr	r0, [pc, #36]	@ (8000ad4 <siprintf+0x38>)
 8000aae:	9107      	str	r1, [sp, #28]
 8000ab0:	9104      	str	r1, [sp, #16]
 8000ab2:	4909      	ldr	r1, [pc, #36]	@ (8000ad8 <siprintf+0x3c>)
 8000ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ab8:	9105      	str	r1, [sp, #20]
 8000aba:	6800      	ldr	r0, [r0, #0]
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	a902      	add	r1, sp, #8
 8000ac0:	f000 f9b8 	bl	8000e34 <_svfiprintf_r>
 8000ac4:	9b02      	ldr	r3, [sp, #8]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	b01c      	add	sp, #112	@ 0x70
 8000acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ad0:	b003      	add	sp, #12
 8000ad2:	4770      	bx	lr
 8000ad4:	20000004 	.word	0x20000004
 8000ad8:	ffff0208 	.word	0xffff0208

08000adc <siscanf>:
 8000adc:	b40e      	push	{r1, r2, r3}
 8000ade:	b530      	push	{r4, r5, lr}
 8000ae0:	b09c      	sub	sp, #112	@ 0x70
 8000ae2:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000ae4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000ae8:	f854 5b04 	ldr.w	r5, [r4], #4
 8000aec:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000af0:	9002      	str	r0, [sp, #8]
 8000af2:	9006      	str	r0, [sp, #24]
 8000af4:	f7ff fb6c 	bl	80001d0 <strlen>
 8000af8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <siscanf+0x4c>)
 8000afa:	9003      	str	r0, [sp, #12]
 8000afc:	9007      	str	r0, [sp, #28]
 8000afe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000b00:	480a      	ldr	r0, [pc, #40]	@ (8000b2c <siscanf+0x50>)
 8000b02:	9401      	str	r4, [sp, #4]
 8000b04:	2300      	movs	r3, #0
 8000b06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000b08:	9314      	str	r3, [sp, #80]	@ 0x50
 8000b0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b0e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000b12:	462a      	mov	r2, r5
 8000b14:	4623      	mov	r3, r4
 8000b16:	a902      	add	r1, sp, #8
 8000b18:	6800      	ldr	r0, [r0, #0]
 8000b1a:	f000 fadf 	bl	80010dc <__ssvfiscanf_r>
 8000b1e:	b01c      	add	sp, #112	@ 0x70
 8000b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b24:	b003      	add	sp, #12
 8000b26:	4770      	bx	lr
 8000b28:	08000b31 	.word	0x08000b31
 8000b2c:	20000004 	.word	0x20000004

08000b30 <__seofread>:
 8000b30:	2000      	movs	r0, #0
 8000b32:	4770      	bx	lr

08000b34 <__errno>:
 8000b34:	4b01      	ldr	r3, [pc, #4]	@ (8000b3c <__errno+0x8>)
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000004 	.word	0x20000004

08000b40 <__libc_init_array>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	4d0d      	ldr	r5, [pc, #52]	@ (8000b78 <__libc_init_array+0x38>)
 8000b44:	4c0d      	ldr	r4, [pc, #52]	@ (8000b7c <__libc_init_array+0x3c>)
 8000b46:	1b64      	subs	r4, r4, r5
 8000b48:	10a4      	asrs	r4, r4, #2
 8000b4a:	2600      	movs	r6, #0
 8000b4c:	42a6      	cmp	r6, r4
 8000b4e:	d109      	bne.n	8000b64 <__libc_init_array+0x24>
 8000b50:	4d0b      	ldr	r5, [pc, #44]	@ (8000b80 <__libc_init_array+0x40>)
 8000b52:	4c0c      	ldr	r4, [pc, #48]	@ (8000b84 <__libc_init_array+0x44>)
 8000b54:	f001 f8e0 	bl	8001d18 <_init>
 8000b58:	1b64      	subs	r4, r4, r5
 8000b5a:	10a4      	asrs	r4, r4, #2
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	42a6      	cmp	r6, r4
 8000b60:	d105      	bne.n	8000b6e <__libc_init_array+0x2e>
 8000b62:	bd70      	pop	{r4, r5, r6, pc}
 8000b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b68:	4798      	blx	r3
 8000b6a:	3601      	adds	r6, #1
 8000b6c:	e7ee      	b.n	8000b4c <__libc_init_array+0xc>
 8000b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b72:	4798      	blx	r3
 8000b74:	3601      	adds	r6, #1
 8000b76:	e7f2      	b.n	8000b5e <__libc_init_array+0x1e>
 8000b78:	08001f44 	.word	0x08001f44
 8000b7c:	08001f44 	.word	0x08001f44
 8000b80:	08001f44 	.word	0x08001f44
 8000b84:	08001f48 	.word	0x08001f48

08000b88 <__retarget_lock_acquire_recursive>:
 8000b88:	4770      	bx	lr

08000b8a <__retarget_lock_release_recursive>:
 8000b8a:	4770      	bx	lr

08000b8c <_free_r>:
 8000b8c:	b538      	push	{r3, r4, r5, lr}
 8000b8e:	4605      	mov	r5, r0
 8000b90:	2900      	cmp	r1, #0
 8000b92:	d041      	beq.n	8000c18 <_free_r+0x8c>
 8000b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b98:	1f0c      	subs	r4, r1, #4
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bfb8      	it	lt
 8000b9e:	18e4      	addlt	r4, r4, r3
 8000ba0:	f000 f8e0 	bl	8000d64 <__malloc_lock>
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c1c <_free_r+0x90>)
 8000ba6:	6813      	ldr	r3, [r2, #0]
 8000ba8:	b933      	cbnz	r3, 8000bb8 <_free_r+0x2c>
 8000baa:	6063      	str	r3, [r4, #4]
 8000bac:	6014      	str	r4, [r2, #0]
 8000bae:	4628      	mov	r0, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b8dc 	b.w	8000d70 <__malloc_unlock>
 8000bb8:	42a3      	cmp	r3, r4
 8000bba:	d908      	bls.n	8000bce <_free_r+0x42>
 8000bbc:	6820      	ldr	r0, [r4, #0]
 8000bbe:	1821      	adds	r1, r4, r0
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	bf01      	itttt	eq
 8000bc4:	6819      	ldreq	r1, [r3, #0]
 8000bc6:	685b      	ldreq	r3, [r3, #4]
 8000bc8:	1809      	addeq	r1, r1, r0
 8000bca:	6021      	streq	r1, [r4, #0]
 8000bcc:	e7ed      	b.n	8000baa <_free_r+0x1e>
 8000bce:	461a      	mov	r2, r3
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	b10b      	cbz	r3, 8000bd8 <_free_r+0x4c>
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d9fa      	bls.n	8000bce <_free_r+0x42>
 8000bd8:	6811      	ldr	r1, [r2, #0]
 8000bda:	1850      	adds	r0, r2, r1
 8000bdc:	42a0      	cmp	r0, r4
 8000bde:	d10b      	bne.n	8000bf8 <_free_r+0x6c>
 8000be0:	6820      	ldr	r0, [r4, #0]
 8000be2:	4401      	add	r1, r0
 8000be4:	1850      	adds	r0, r2, r1
 8000be6:	4283      	cmp	r3, r0
 8000be8:	6011      	str	r1, [r2, #0]
 8000bea:	d1e0      	bne.n	8000bae <_free_r+0x22>
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	6053      	str	r3, [r2, #4]
 8000bf2:	4408      	add	r0, r1
 8000bf4:	6010      	str	r0, [r2, #0]
 8000bf6:	e7da      	b.n	8000bae <_free_r+0x22>
 8000bf8:	d902      	bls.n	8000c00 <_free_r+0x74>
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	602b      	str	r3, [r5, #0]
 8000bfe:	e7d6      	b.n	8000bae <_free_r+0x22>
 8000c00:	6820      	ldr	r0, [r4, #0]
 8000c02:	1821      	adds	r1, r4, r0
 8000c04:	428b      	cmp	r3, r1
 8000c06:	bf04      	itt	eq
 8000c08:	6819      	ldreq	r1, [r3, #0]
 8000c0a:	685b      	ldreq	r3, [r3, #4]
 8000c0c:	6063      	str	r3, [r4, #4]
 8000c0e:	bf04      	itt	eq
 8000c10:	1809      	addeq	r1, r1, r0
 8000c12:	6021      	streq	r1, [r4, #0]
 8000c14:	6054      	str	r4, [r2, #4]
 8000c16:	e7ca      	b.n	8000bae <_free_r+0x22>
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200001b8 	.word	0x200001b8

08000c20 <sbrk_aligned>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	4e0f      	ldr	r6, [pc, #60]	@ (8000c60 <sbrk_aligned+0x40>)
 8000c24:	460c      	mov	r4, r1
 8000c26:	6831      	ldr	r1, [r6, #0]
 8000c28:	4605      	mov	r5, r0
 8000c2a:	b911      	cbnz	r1, 8000c32 <sbrk_aligned+0x12>
 8000c2c:	f000 ff34 	bl	8001a98 <_sbrk_r>
 8000c30:	6030      	str	r0, [r6, #0]
 8000c32:	4621      	mov	r1, r4
 8000c34:	4628      	mov	r0, r5
 8000c36:	f000 ff2f 	bl	8001a98 <_sbrk_r>
 8000c3a:	1c43      	adds	r3, r0, #1
 8000c3c:	d103      	bne.n	8000c46 <sbrk_aligned+0x26>
 8000c3e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c42:	4620      	mov	r0, r4
 8000c44:	bd70      	pop	{r4, r5, r6, pc}
 8000c46:	1cc4      	adds	r4, r0, #3
 8000c48:	f024 0403 	bic.w	r4, r4, #3
 8000c4c:	42a0      	cmp	r0, r4
 8000c4e:	d0f8      	beq.n	8000c42 <sbrk_aligned+0x22>
 8000c50:	1a21      	subs	r1, r4, r0
 8000c52:	4628      	mov	r0, r5
 8000c54:	f000 ff20 	bl	8001a98 <_sbrk_r>
 8000c58:	3001      	adds	r0, #1
 8000c5a:	d1f2      	bne.n	8000c42 <sbrk_aligned+0x22>
 8000c5c:	e7ef      	b.n	8000c3e <sbrk_aligned+0x1e>
 8000c5e:	bf00      	nop
 8000c60:	200001b4 	.word	0x200001b4

08000c64 <_malloc_r>:
 8000c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c68:	1ccd      	adds	r5, r1, #3
 8000c6a:	f025 0503 	bic.w	r5, r5, #3
 8000c6e:	3508      	adds	r5, #8
 8000c70:	2d0c      	cmp	r5, #12
 8000c72:	bf38      	it	cc
 8000c74:	250c      	movcc	r5, #12
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	4606      	mov	r6, r0
 8000c7a:	db01      	blt.n	8000c80 <_malloc_r+0x1c>
 8000c7c:	42a9      	cmp	r1, r5
 8000c7e:	d904      	bls.n	8000c8a <_malloc_r+0x26>
 8000c80:	230c      	movs	r3, #12
 8000c82:	6033      	str	r3, [r6, #0]
 8000c84:	2000      	movs	r0, #0
 8000c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d60 <_malloc_r+0xfc>
 8000c8e:	f000 f869 	bl	8000d64 <__malloc_lock>
 8000c92:	f8d8 3000 	ldr.w	r3, [r8]
 8000c96:	461c      	mov	r4, r3
 8000c98:	bb44      	cbnz	r4, 8000cec <_malloc_r+0x88>
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	f7ff ffbf 	bl	8000c20 <sbrk_aligned>
 8000ca2:	1c43      	adds	r3, r0, #1
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	d158      	bne.n	8000d5a <_malloc_r+0xf6>
 8000ca8:	f8d8 4000 	ldr.w	r4, [r8]
 8000cac:	4627      	mov	r7, r4
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d143      	bne.n	8000d3a <_malloc_r+0xd6>
 8000cb2:	2c00      	cmp	r4, #0
 8000cb4:	d04b      	beq.n	8000d4e <_malloc_r+0xea>
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	4630      	mov	r0, r6
 8000cbc:	eb04 0903 	add.w	r9, r4, r3
 8000cc0:	f000 feea 	bl	8001a98 <_sbrk_r>
 8000cc4:	4581      	cmp	r9, r0
 8000cc6:	d142      	bne.n	8000d4e <_malloc_r+0xea>
 8000cc8:	6821      	ldr	r1, [r4, #0]
 8000cca:	1a6d      	subs	r5, r5, r1
 8000ccc:	4629      	mov	r1, r5
 8000cce:	4630      	mov	r0, r6
 8000cd0:	f7ff ffa6 	bl	8000c20 <sbrk_aligned>
 8000cd4:	3001      	adds	r0, #1
 8000cd6:	d03a      	beq.n	8000d4e <_malloc_r+0xea>
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	442b      	add	r3, r5
 8000cdc:	6023      	str	r3, [r4, #0]
 8000cde:	f8d8 3000 	ldr.w	r3, [r8]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	bb62      	cbnz	r2, 8000d40 <_malloc_r+0xdc>
 8000ce6:	f8c8 7000 	str.w	r7, [r8]
 8000cea:	e00f      	b.n	8000d0c <_malloc_r+0xa8>
 8000cec:	6822      	ldr	r2, [r4, #0]
 8000cee:	1b52      	subs	r2, r2, r5
 8000cf0:	d420      	bmi.n	8000d34 <_malloc_r+0xd0>
 8000cf2:	2a0b      	cmp	r2, #11
 8000cf4:	d917      	bls.n	8000d26 <_malloc_r+0xc2>
 8000cf6:	1961      	adds	r1, r4, r5
 8000cf8:	42a3      	cmp	r3, r4
 8000cfa:	6025      	str	r5, [r4, #0]
 8000cfc:	bf18      	it	ne
 8000cfe:	6059      	strne	r1, [r3, #4]
 8000d00:	6863      	ldr	r3, [r4, #4]
 8000d02:	bf08      	it	eq
 8000d04:	f8c8 1000 	streq.w	r1, [r8]
 8000d08:	5162      	str	r2, [r4, r5]
 8000d0a:	604b      	str	r3, [r1, #4]
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	f000 f82f 	bl	8000d70 <__malloc_unlock>
 8000d12:	f104 000b 	add.w	r0, r4, #11
 8000d16:	1d23      	adds	r3, r4, #4
 8000d18:	f020 0007 	bic.w	r0, r0, #7
 8000d1c:	1ac2      	subs	r2, r0, r3
 8000d1e:	bf1c      	itt	ne
 8000d20:	1a1b      	subne	r3, r3, r0
 8000d22:	50a3      	strne	r3, [r4, r2]
 8000d24:	e7af      	b.n	8000c86 <_malloc_r+0x22>
 8000d26:	6862      	ldr	r2, [r4, #4]
 8000d28:	42a3      	cmp	r3, r4
 8000d2a:	bf0c      	ite	eq
 8000d2c:	f8c8 2000 	streq.w	r2, [r8]
 8000d30:	605a      	strne	r2, [r3, #4]
 8000d32:	e7eb      	b.n	8000d0c <_malloc_r+0xa8>
 8000d34:	4623      	mov	r3, r4
 8000d36:	6864      	ldr	r4, [r4, #4]
 8000d38:	e7ae      	b.n	8000c98 <_malloc_r+0x34>
 8000d3a:	463c      	mov	r4, r7
 8000d3c:	687f      	ldr	r7, [r7, #4]
 8000d3e:	e7b6      	b.n	8000cae <_malloc_r+0x4a>
 8000d40:	461a      	mov	r2, r3
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	42a3      	cmp	r3, r4
 8000d46:	d1fb      	bne.n	8000d40 <_malloc_r+0xdc>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	6053      	str	r3, [r2, #4]
 8000d4c:	e7de      	b.n	8000d0c <_malloc_r+0xa8>
 8000d4e:	230c      	movs	r3, #12
 8000d50:	6033      	str	r3, [r6, #0]
 8000d52:	4630      	mov	r0, r6
 8000d54:	f000 f80c 	bl	8000d70 <__malloc_unlock>
 8000d58:	e794      	b.n	8000c84 <_malloc_r+0x20>
 8000d5a:	6005      	str	r5, [r0, #0]
 8000d5c:	e7d6      	b.n	8000d0c <_malloc_r+0xa8>
 8000d5e:	bf00      	nop
 8000d60:	200001b8 	.word	0x200001b8

08000d64 <__malloc_lock>:
 8000d64:	4801      	ldr	r0, [pc, #4]	@ (8000d6c <__malloc_lock+0x8>)
 8000d66:	f7ff bf0f 	b.w	8000b88 <__retarget_lock_acquire_recursive>
 8000d6a:	bf00      	nop
 8000d6c:	200001b0 	.word	0x200001b0

08000d70 <__malloc_unlock>:
 8000d70:	4801      	ldr	r0, [pc, #4]	@ (8000d78 <__malloc_unlock+0x8>)
 8000d72:	f7ff bf0a 	b.w	8000b8a <__retarget_lock_release_recursive>
 8000d76:	bf00      	nop
 8000d78:	200001b0 	.word	0x200001b0

08000d7c <__ssputs_r>:
 8000d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d80:	688e      	ldr	r6, [r1, #8]
 8000d82:	461f      	mov	r7, r3
 8000d84:	42be      	cmp	r6, r7
 8000d86:	680b      	ldr	r3, [r1, #0]
 8000d88:	4682      	mov	sl, r0
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	4690      	mov	r8, r2
 8000d8e:	d82d      	bhi.n	8000dec <__ssputs_r+0x70>
 8000d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000d98:	d026      	beq.n	8000de8 <__ssputs_r+0x6c>
 8000d9a:	6965      	ldr	r5, [r4, #20]
 8000d9c:	6909      	ldr	r1, [r1, #16]
 8000d9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000da2:	eba3 0901 	sub.w	r9, r3, r1
 8000da6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000daa:	1c7b      	adds	r3, r7, #1
 8000dac:	444b      	add	r3, r9
 8000dae:	106d      	asrs	r5, r5, #1
 8000db0:	429d      	cmp	r5, r3
 8000db2:	bf38      	it	cc
 8000db4:	461d      	movcc	r5, r3
 8000db6:	0553      	lsls	r3, r2, #21
 8000db8:	d527      	bpl.n	8000e0a <__ssputs_r+0x8e>
 8000dba:	4629      	mov	r1, r5
 8000dbc:	f7ff ff52 	bl	8000c64 <_malloc_r>
 8000dc0:	4606      	mov	r6, r0
 8000dc2:	b360      	cbz	r0, 8000e1e <__ssputs_r+0xa2>
 8000dc4:	6921      	ldr	r1, [r4, #16]
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	f000 fe76 	bl	8001ab8 <memcpy>
 8000dcc:	89a3      	ldrh	r3, [r4, #12]
 8000dce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd6:	81a3      	strh	r3, [r4, #12]
 8000dd8:	6126      	str	r6, [r4, #16]
 8000dda:	6165      	str	r5, [r4, #20]
 8000ddc:	444e      	add	r6, r9
 8000dde:	eba5 0509 	sub.w	r5, r5, r9
 8000de2:	6026      	str	r6, [r4, #0]
 8000de4:	60a5      	str	r5, [r4, #8]
 8000de6:	463e      	mov	r6, r7
 8000de8:	42be      	cmp	r6, r7
 8000dea:	d900      	bls.n	8000dee <__ssputs_r+0x72>
 8000dec:	463e      	mov	r6, r7
 8000dee:	6820      	ldr	r0, [r4, #0]
 8000df0:	4632      	mov	r2, r6
 8000df2:	4641      	mov	r1, r8
 8000df4:	f000 fe35 	bl	8001a62 <memmove>
 8000df8:	68a3      	ldr	r3, [r4, #8]
 8000dfa:	1b9b      	subs	r3, r3, r6
 8000dfc:	60a3      	str	r3, [r4, #8]
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	4433      	add	r3, r6
 8000e02:	6023      	str	r3, [r4, #0]
 8000e04:	2000      	movs	r0, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	462a      	mov	r2, r5
 8000e0c:	f000 fe62 	bl	8001ad4 <_realloc_r>
 8000e10:	4606      	mov	r6, r0
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d1e0      	bne.n	8000dd8 <__ssputs_r+0x5c>
 8000e16:	6921      	ldr	r1, [r4, #16]
 8000e18:	4650      	mov	r0, sl
 8000e1a:	f7ff feb7 	bl	8000b8c <_free_r>
 8000e1e:	230c      	movs	r3, #12
 8000e20:	f8ca 3000 	str.w	r3, [sl]
 8000e24:	89a3      	ldrh	r3, [r4, #12]
 8000e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e2a:	81a3      	strh	r3, [r4, #12]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e30:	e7e9      	b.n	8000e06 <__ssputs_r+0x8a>
	...

08000e34 <_svfiprintf_r>:
 8000e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e38:	4698      	mov	r8, r3
 8000e3a:	898b      	ldrh	r3, [r1, #12]
 8000e3c:	061b      	lsls	r3, r3, #24
 8000e3e:	b09d      	sub	sp, #116	@ 0x74
 8000e40:	4607      	mov	r7, r0
 8000e42:	460d      	mov	r5, r1
 8000e44:	4614      	mov	r4, r2
 8000e46:	d510      	bpl.n	8000e6a <_svfiprintf_r+0x36>
 8000e48:	690b      	ldr	r3, [r1, #16]
 8000e4a:	b973      	cbnz	r3, 8000e6a <_svfiprintf_r+0x36>
 8000e4c:	2140      	movs	r1, #64	@ 0x40
 8000e4e:	f7ff ff09 	bl	8000c64 <_malloc_r>
 8000e52:	6028      	str	r0, [r5, #0]
 8000e54:	6128      	str	r0, [r5, #16]
 8000e56:	b930      	cbnz	r0, 8000e66 <_svfiprintf_r+0x32>
 8000e58:	230c      	movs	r3, #12
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e60:	b01d      	add	sp, #116	@ 0x74
 8000e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e66:	2340      	movs	r3, #64	@ 0x40
 8000e68:	616b      	str	r3, [r5, #20]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e6e:	2320      	movs	r3, #32
 8000e70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e78:	2330      	movs	r3, #48	@ 0x30
 8000e7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001018 <_svfiprintf_r+0x1e4>
 8000e7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000e82:	f04f 0901 	mov.w	r9, #1
 8000e86:	4623      	mov	r3, r4
 8000e88:	469a      	mov	sl, r3
 8000e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e8e:	b10a      	cbz	r2, 8000e94 <_svfiprintf_r+0x60>
 8000e90:	2a25      	cmp	r2, #37	@ 0x25
 8000e92:	d1f9      	bne.n	8000e88 <_svfiprintf_r+0x54>
 8000e94:	ebba 0b04 	subs.w	fp, sl, r4
 8000e98:	d00b      	beq.n	8000eb2 <_svfiprintf_r+0x7e>
 8000e9a:	465b      	mov	r3, fp
 8000e9c:	4622      	mov	r2, r4
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	f7ff ff6b 	bl	8000d7c <__ssputs_r>
 8000ea6:	3001      	adds	r0, #1
 8000ea8:	f000 80a7 	beq.w	8000ffa <_svfiprintf_r+0x1c6>
 8000eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000eae:	445a      	add	r2, fp
 8000eb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8000eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 809f 	beq.w	8000ffa <_svfiprintf_r+0x1c6>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ec6:	f10a 0a01 	add.w	sl, sl, #1
 8000eca:	9304      	str	r3, [sp, #16]
 8000ecc:	9307      	str	r3, [sp, #28]
 8000ece:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ed2:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ed4:	4654      	mov	r4, sl
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000edc:	484e      	ldr	r0, [pc, #312]	@ (8001018 <_svfiprintf_r+0x1e4>)
 8000ede:	f7ff f97f 	bl	80001e0 <memchr>
 8000ee2:	9a04      	ldr	r2, [sp, #16]
 8000ee4:	b9d8      	cbnz	r0, 8000f1e <_svfiprintf_r+0xea>
 8000ee6:	06d0      	lsls	r0, r2, #27
 8000ee8:	bf44      	itt	mi
 8000eea:	2320      	movmi	r3, #32
 8000eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ef0:	0711      	lsls	r1, r2, #28
 8000ef2:	bf44      	itt	mi
 8000ef4:	232b      	movmi	r3, #43	@ 0x2b
 8000ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000efa:	f89a 3000 	ldrb.w	r3, [sl]
 8000efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f00:	d015      	beq.n	8000f2e <_svfiprintf_r+0xfa>
 8000f02:	9a07      	ldr	r2, [sp, #28]
 8000f04:	4654      	mov	r4, sl
 8000f06:	2000      	movs	r0, #0
 8000f08:	f04f 0c0a 	mov.w	ip, #10
 8000f0c:	4621      	mov	r1, r4
 8000f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f12:	3b30      	subs	r3, #48	@ 0x30
 8000f14:	2b09      	cmp	r3, #9
 8000f16:	d94b      	bls.n	8000fb0 <_svfiprintf_r+0x17c>
 8000f18:	b1b0      	cbz	r0, 8000f48 <_svfiprintf_r+0x114>
 8000f1a:	9207      	str	r2, [sp, #28]
 8000f1c:	e014      	b.n	8000f48 <_svfiprintf_r+0x114>
 8000f1e:	eba0 0308 	sub.w	r3, r0, r8
 8000f22:	fa09 f303 	lsl.w	r3, r9, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	9304      	str	r3, [sp, #16]
 8000f2a:	46a2      	mov	sl, r4
 8000f2c:	e7d2      	b.n	8000ed4 <_svfiprintf_r+0xa0>
 8000f2e:	9b03      	ldr	r3, [sp, #12]
 8000f30:	1d19      	adds	r1, r3, #4
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	9103      	str	r1, [sp, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bfbb      	ittet	lt
 8000f3a:	425b      	neglt	r3, r3
 8000f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8000f40:	9307      	strge	r3, [sp, #28]
 8000f42:	9307      	strlt	r3, [sp, #28]
 8000f44:	bfb8      	it	lt
 8000f46:	9204      	strlt	r2, [sp, #16]
 8000f48:	7823      	ldrb	r3, [r4, #0]
 8000f4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f4c:	d10a      	bne.n	8000f64 <_svfiprintf_r+0x130>
 8000f4e:	7863      	ldrb	r3, [r4, #1]
 8000f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f52:	d132      	bne.n	8000fba <_svfiprintf_r+0x186>
 8000f54:	9b03      	ldr	r3, [sp, #12]
 8000f56:	1d1a      	adds	r2, r3, #4
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	9203      	str	r2, [sp, #12]
 8000f5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000f60:	3402      	adds	r4, #2
 8000f62:	9305      	str	r3, [sp, #20]
 8000f64:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800101c <_svfiprintf_r+0x1e8>
 8000f68:	7821      	ldrb	r1, [r4, #0]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	4650      	mov	r0, sl
 8000f6e:	f7ff f937 	bl	80001e0 <memchr>
 8000f72:	b138      	cbz	r0, 8000f84 <_svfiprintf_r+0x150>
 8000f74:	9b04      	ldr	r3, [sp, #16]
 8000f76:	eba0 000a 	sub.w	r0, r0, sl
 8000f7a:	2240      	movs	r2, #64	@ 0x40
 8000f7c:	4082      	lsls	r2, r0
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	3401      	adds	r4, #1
 8000f82:	9304      	str	r3, [sp, #16]
 8000f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f88:	4825      	ldr	r0, [pc, #148]	@ (8001020 <_svfiprintf_r+0x1ec>)
 8000f8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f8e:	2206      	movs	r2, #6
 8000f90:	f7ff f926 	bl	80001e0 <memchr>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d036      	beq.n	8001006 <_svfiprintf_r+0x1d2>
 8000f98:	4b22      	ldr	r3, [pc, #136]	@ (8001024 <_svfiprintf_r+0x1f0>)
 8000f9a:	bb1b      	cbnz	r3, 8000fe4 <_svfiprintf_r+0x1b0>
 8000f9c:	9b03      	ldr	r3, [sp, #12]
 8000f9e:	3307      	adds	r3, #7
 8000fa0:	f023 0307 	bic.w	r3, r3, #7
 8000fa4:	3308      	adds	r3, #8
 8000fa6:	9303      	str	r3, [sp, #12]
 8000fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000faa:	4433      	add	r3, r6
 8000fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fae:	e76a      	b.n	8000e86 <_svfiprintf_r+0x52>
 8000fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fb4:	460c      	mov	r4, r1
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <_svfiprintf_r+0xd8>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	3401      	adds	r4, #1
 8000fbe:	9305      	str	r3, [sp, #20]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 0c0a 	mov.w	ip, #10
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fcc:	3a30      	subs	r2, #48	@ 0x30
 8000fce:	2a09      	cmp	r2, #9
 8000fd0:	d903      	bls.n	8000fda <_svfiprintf_r+0x1a6>
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0c6      	beq.n	8000f64 <_svfiprintf_r+0x130>
 8000fd6:	9105      	str	r1, [sp, #20]
 8000fd8:	e7c4      	b.n	8000f64 <_svfiprintf_r+0x130>
 8000fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fde:	4604      	mov	r4, r0
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e7f0      	b.n	8000fc6 <_svfiprintf_r+0x192>
 8000fe4:	ab03      	add	r3, sp, #12
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	462a      	mov	r2, r5
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <_svfiprintf_r+0x1f4>)
 8000fec:	a904      	add	r1, sp, #16
 8000fee:	4638      	mov	r0, r7
 8000ff0:	f3af 8000 	nop.w
 8000ff4:	1c42      	adds	r2, r0, #1
 8000ff6:	4606      	mov	r6, r0
 8000ff8:	d1d6      	bne.n	8000fa8 <_svfiprintf_r+0x174>
 8000ffa:	89ab      	ldrh	r3, [r5, #12]
 8000ffc:	065b      	lsls	r3, r3, #25
 8000ffe:	f53f af2d 	bmi.w	8000e5c <_svfiprintf_r+0x28>
 8001002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001004:	e72c      	b.n	8000e60 <_svfiprintf_r+0x2c>
 8001006:	ab03      	add	r3, sp, #12
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	462a      	mov	r2, r5
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <_svfiprintf_r+0x1f4>)
 800100e:	a904      	add	r1, sp, #16
 8001010:	4638      	mov	r0, r7
 8001012:	f000 fa45 	bl	80014a0 <_printf_i>
 8001016:	e7ed      	b.n	8000ff4 <_svfiprintf_r+0x1c0>
 8001018:	08001dec 	.word	0x08001dec
 800101c:	08001df2 	.word	0x08001df2
 8001020:	08001df6 	.word	0x08001df6
 8001024:	00000000 	.word	0x00000000
 8001028:	08000d7d 	.word	0x08000d7d

0800102c <_sungetc_r>:
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	1c4b      	adds	r3, r1, #1
 8001030:	4614      	mov	r4, r2
 8001032:	d103      	bne.n	800103c <_sungetc_r+0x10>
 8001034:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001038:	4628      	mov	r0, r5
 800103a:	bd38      	pop	{r3, r4, r5, pc}
 800103c:	8993      	ldrh	r3, [r2, #12]
 800103e:	f023 0320 	bic.w	r3, r3, #32
 8001042:	8193      	strh	r3, [r2, #12]
 8001044:	6853      	ldr	r3, [r2, #4]
 8001046:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001048:	b2cd      	uxtb	r5, r1
 800104a:	b18a      	cbz	r2, 8001070 <_sungetc_r+0x44>
 800104c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800104e:	429a      	cmp	r2, r3
 8001050:	dd08      	ble.n	8001064 <_sungetc_r+0x38>
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	1e5a      	subs	r2, r3, #1
 8001056:	6022      	str	r2, [r4, #0]
 8001058:	f803 5c01 	strb.w	r5, [r3, #-1]
 800105c:	6863      	ldr	r3, [r4, #4]
 800105e:	3301      	adds	r3, #1
 8001060:	6063      	str	r3, [r4, #4]
 8001062:	e7e9      	b.n	8001038 <_sungetc_r+0xc>
 8001064:	4621      	mov	r1, r4
 8001066:	f000 fcc2 	bl	80019ee <__submore>
 800106a:	2800      	cmp	r0, #0
 800106c:	d0f1      	beq.n	8001052 <_sungetc_r+0x26>
 800106e:	e7e1      	b.n	8001034 <_sungetc_r+0x8>
 8001070:	6921      	ldr	r1, [r4, #16]
 8001072:	6822      	ldr	r2, [r4, #0]
 8001074:	b141      	cbz	r1, 8001088 <_sungetc_r+0x5c>
 8001076:	4291      	cmp	r1, r2
 8001078:	d206      	bcs.n	8001088 <_sungetc_r+0x5c>
 800107a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800107e:	42a9      	cmp	r1, r5
 8001080:	d102      	bne.n	8001088 <_sungetc_r+0x5c>
 8001082:	3a01      	subs	r2, #1
 8001084:	6022      	str	r2, [r4, #0]
 8001086:	e7ea      	b.n	800105e <_sungetc_r+0x32>
 8001088:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800108c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001090:	6363      	str	r3, [r4, #52]	@ 0x34
 8001092:	2303      	movs	r3, #3
 8001094:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001096:	4623      	mov	r3, r4
 8001098:	f803 5f46 	strb.w	r5, [r3, #70]!
 800109c:	6023      	str	r3, [r4, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	e7de      	b.n	8001060 <_sungetc_r+0x34>

080010a2 <__ssrefill_r>:
 80010a2:	b510      	push	{r4, lr}
 80010a4:	460c      	mov	r4, r1
 80010a6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80010a8:	b169      	cbz	r1, 80010c6 <__ssrefill_r+0x24>
 80010aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010ae:	4299      	cmp	r1, r3
 80010b0:	d001      	beq.n	80010b6 <__ssrefill_r+0x14>
 80010b2:	f7ff fd6b 	bl	8000b8c <_free_r>
 80010b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010b8:	6063      	str	r3, [r4, #4]
 80010ba:	2000      	movs	r0, #0
 80010bc:	6360      	str	r0, [r4, #52]	@ 0x34
 80010be:	b113      	cbz	r3, 80010c6 <__ssrefill_r+0x24>
 80010c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80010c2:	6023      	str	r3, [r4, #0]
 80010c4:	bd10      	pop	{r4, pc}
 80010c6:	6923      	ldr	r3, [r4, #16]
 80010c8:	6023      	str	r3, [r4, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	6063      	str	r3, [r4, #4]
 80010ce:	89a3      	ldrh	r3, [r4, #12]
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	81a3      	strh	r3, [r4, #12]
 80010d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010da:	e7f3      	b.n	80010c4 <__ssrefill_r+0x22>

080010dc <__ssvfiscanf_r>:
 80010dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e0:	460c      	mov	r4, r1
 80010e2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80010e6:	2100      	movs	r1, #0
 80010e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80010ec:	49a5      	ldr	r1, [pc, #660]	@ (8001384 <__ssvfiscanf_r+0x2a8>)
 80010ee:	91a0      	str	r1, [sp, #640]	@ 0x280
 80010f0:	f10d 0804 	add.w	r8, sp, #4
 80010f4:	49a4      	ldr	r1, [pc, #656]	@ (8001388 <__ssvfiscanf_r+0x2ac>)
 80010f6:	4fa5      	ldr	r7, [pc, #660]	@ (800138c <__ssvfiscanf_r+0x2b0>)
 80010f8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80010fc:	4606      	mov	r6, r0
 80010fe:	91a1      	str	r1, [sp, #644]	@ 0x284
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	7813      	ldrb	r3, [r2, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 8158 	beq.w	80013ba <__ssvfiscanf_r+0x2de>
 800110a:	5cf9      	ldrb	r1, [r7, r3]
 800110c:	f011 0108 	ands.w	r1, r1, #8
 8001110:	f102 0501 	add.w	r5, r2, #1
 8001114:	d019      	beq.n	800114a <__ssvfiscanf_r+0x6e>
 8001116:	6863      	ldr	r3, [r4, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	dd0f      	ble.n	800113c <__ssvfiscanf_r+0x60>
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	5cba      	ldrb	r2, [r7, r2]
 8001122:	0712      	lsls	r2, r2, #28
 8001124:	d401      	bmi.n	800112a <__ssvfiscanf_r+0x4e>
 8001126:	462a      	mov	r2, r5
 8001128:	e7eb      	b.n	8001102 <__ssvfiscanf_r+0x26>
 800112a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800112c:	3201      	adds	r2, #1
 800112e:	9245      	str	r2, [sp, #276]	@ 0x114
 8001130:	6862      	ldr	r2, [r4, #4]
 8001132:	3301      	adds	r3, #1
 8001134:	3a01      	subs	r2, #1
 8001136:	6062      	str	r2, [r4, #4]
 8001138:	6023      	str	r3, [r4, #0]
 800113a:	e7ec      	b.n	8001116 <__ssvfiscanf_r+0x3a>
 800113c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800113e:	4621      	mov	r1, r4
 8001140:	4630      	mov	r0, r6
 8001142:	4798      	blx	r3
 8001144:	2800      	cmp	r0, #0
 8001146:	d0e9      	beq.n	800111c <__ssvfiscanf_r+0x40>
 8001148:	e7ed      	b.n	8001126 <__ssvfiscanf_r+0x4a>
 800114a:	2b25      	cmp	r3, #37	@ 0x25
 800114c:	d012      	beq.n	8001174 <__ssvfiscanf_r+0x98>
 800114e:	4699      	mov	r9, r3
 8001150:	6863      	ldr	r3, [r4, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f340 8093 	ble.w	800127e <__ssvfiscanf_r+0x1a2>
 8001158:	6822      	ldr	r2, [r4, #0]
 800115a:	7813      	ldrb	r3, [r2, #0]
 800115c:	454b      	cmp	r3, r9
 800115e:	f040 812c 	bne.w	80013ba <__ssvfiscanf_r+0x2de>
 8001162:	6863      	ldr	r3, [r4, #4]
 8001164:	3b01      	subs	r3, #1
 8001166:	6063      	str	r3, [r4, #4]
 8001168:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800116a:	3201      	adds	r2, #1
 800116c:	3301      	adds	r3, #1
 800116e:	6022      	str	r2, [r4, #0]
 8001170:	9345      	str	r3, [sp, #276]	@ 0x114
 8001172:	e7d8      	b.n	8001126 <__ssvfiscanf_r+0x4a>
 8001174:	9141      	str	r1, [sp, #260]	@ 0x104
 8001176:	9143      	str	r1, [sp, #268]	@ 0x10c
 8001178:	7853      	ldrb	r3, [r2, #1]
 800117a:	2b2a      	cmp	r3, #42	@ 0x2a
 800117c:	bf02      	ittt	eq
 800117e:	2310      	moveq	r3, #16
 8001180:	1c95      	addeq	r5, r2, #2
 8001182:	9341      	streq	r3, [sp, #260]	@ 0x104
 8001184:	220a      	movs	r2, #10
 8001186:	46a9      	mov	r9, r5
 8001188:	f819 1b01 	ldrb.w	r1, [r9], #1
 800118c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8001190:	2b09      	cmp	r3, #9
 8001192:	d91e      	bls.n	80011d2 <__ssvfiscanf_r+0xf6>
 8001194:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8001390 <__ssvfiscanf_r+0x2b4>
 8001198:	2203      	movs	r2, #3
 800119a:	4650      	mov	r0, sl
 800119c:	f7ff f820 	bl	80001e0 <memchr>
 80011a0:	b138      	cbz	r0, 80011b2 <__ssvfiscanf_r+0xd6>
 80011a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80011a4:	eba0 000a 	sub.w	r0, r0, sl
 80011a8:	2301      	movs	r3, #1
 80011aa:	4083      	lsls	r3, r0
 80011ac:	4313      	orrs	r3, r2
 80011ae:	9341      	str	r3, [sp, #260]	@ 0x104
 80011b0:	464d      	mov	r5, r9
 80011b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80011b6:	2b78      	cmp	r3, #120	@ 0x78
 80011b8:	d806      	bhi.n	80011c8 <__ssvfiscanf_r+0xec>
 80011ba:	2b57      	cmp	r3, #87	@ 0x57
 80011bc:	d810      	bhi.n	80011e0 <__ssvfiscanf_r+0x104>
 80011be:	2b25      	cmp	r3, #37	@ 0x25
 80011c0:	d0c5      	beq.n	800114e <__ssvfiscanf_r+0x72>
 80011c2:	d857      	bhi.n	8001274 <__ssvfiscanf_r+0x198>
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d065      	beq.n	8001294 <__ssvfiscanf_r+0x1b8>
 80011c8:	2303      	movs	r3, #3
 80011ca:	9347      	str	r3, [sp, #284]	@ 0x11c
 80011cc:	230a      	movs	r3, #10
 80011ce:	9342      	str	r3, [sp, #264]	@ 0x108
 80011d0:	e078      	b.n	80012c4 <__ssvfiscanf_r+0x1e8>
 80011d2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80011d4:	fb02 1103 	mla	r1, r2, r3, r1
 80011d8:	3930      	subs	r1, #48	@ 0x30
 80011da:	9143      	str	r1, [sp, #268]	@ 0x10c
 80011dc:	464d      	mov	r5, r9
 80011de:	e7d2      	b.n	8001186 <__ssvfiscanf_r+0xaa>
 80011e0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80011e4:	2a20      	cmp	r2, #32
 80011e6:	d8ef      	bhi.n	80011c8 <__ssvfiscanf_r+0xec>
 80011e8:	a101      	add	r1, pc, #4	@ (adr r1, 80011f0 <__ssvfiscanf_r+0x114>)
 80011ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	080012a3 	.word	0x080012a3
 80011f4:	080011c9 	.word	0x080011c9
 80011f8:	080011c9 	.word	0x080011c9
 80011fc:	080012fd 	.word	0x080012fd
 8001200:	080011c9 	.word	0x080011c9
 8001204:	080011c9 	.word	0x080011c9
 8001208:	080011c9 	.word	0x080011c9
 800120c:	080011c9 	.word	0x080011c9
 8001210:	080011c9 	.word	0x080011c9
 8001214:	080011c9 	.word	0x080011c9
 8001218:	080011c9 	.word	0x080011c9
 800121c:	08001313 	.word	0x08001313
 8001220:	080012f9 	.word	0x080012f9
 8001224:	0800127b 	.word	0x0800127b
 8001228:	0800127b 	.word	0x0800127b
 800122c:	0800127b 	.word	0x0800127b
 8001230:	080011c9 	.word	0x080011c9
 8001234:	080012b5 	.word	0x080012b5
 8001238:	080011c9 	.word	0x080011c9
 800123c:	080011c9 	.word	0x080011c9
 8001240:	080011c9 	.word	0x080011c9
 8001244:	080011c9 	.word	0x080011c9
 8001248:	08001323 	.word	0x08001323
 800124c:	080012bd 	.word	0x080012bd
 8001250:	0800129b 	.word	0x0800129b
 8001254:	080011c9 	.word	0x080011c9
 8001258:	080011c9 	.word	0x080011c9
 800125c:	0800131f 	.word	0x0800131f
 8001260:	080011c9 	.word	0x080011c9
 8001264:	080012f9 	.word	0x080012f9
 8001268:	080011c9 	.word	0x080011c9
 800126c:	080011c9 	.word	0x080011c9
 8001270:	080012a3 	.word	0x080012a3
 8001274:	3b45      	subs	r3, #69	@ 0x45
 8001276:	2b02      	cmp	r3, #2
 8001278:	d8a6      	bhi.n	80011c8 <__ssvfiscanf_r+0xec>
 800127a:	2305      	movs	r3, #5
 800127c:	e021      	b.n	80012c2 <__ssvfiscanf_r+0x1e6>
 800127e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001280:	4621      	mov	r1, r4
 8001282:	4630      	mov	r0, r6
 8001284:	4798      	blx	r3
 8001286:	2800      	cmp	r0, #0
 8001288:	f43f af66 	beq.w	8001158 <__ssvfiscanf_r+0x7c>
 800128c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800128e:	2800      	cmp	r0, #0
 8001290:	f040 808b 	bne.w	80013aa <__ssvfiscanf_r+0x2ce>
 8001294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001298:	e08b      	b.n	80013b2 <__ssvfiscanf_r+0x2d6>
 800129a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800129c:	f042 0220 	orr.w	r2, r2, #32
 80012a0:	9241      	str	r2, [sp, #260]	@ 0x104
 80012a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80012a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012a8:	9241      	str	r2, [sp, #260]	@ 0x104
 80012aa:	2210      	movs	r2, #16
 80012ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80012ae:	9242      	str	r2, [sp, #264]	@ 0x108
 80012b0:	d902      	bls.n	80012b8 <__ssvfiscanf_r+0x1dc>
 80012b2:	e005      	b.n	80012c0 <__ssvfiscanf_r+0x1e4>
 80012b4:	2300      	movs	r3, #0
 80012b6:	9342      	str	r3, [sp, #264]	@ 0x108
 80012b8:	2303      	movs	r3, #3
 80012ba:	e002      	b.n	80012c2 <__ssvfiscanf_r+0x1e6>
 80012bc:	2308      	movs	r3, #8
 80012be:	9342      	str	r3, [sp, #264]	@ 0x108
 80012c0:	2304      	movs	r3, #4
 80012c2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80012c4:	6863      	ldr	r3, [r4, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	dd39      	ble.n	800133e <__ssvfiscanf_r+0x262>
 80012ca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80012cc:	0659      	lsls	r1, r3, #25
 80012ce:	d404      	bmi.n	80012da <__ssvfiscanf_r+0x1fe>
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	5cba      	ldrb	r2, [r7, r2]
 80012d6:	0712      	lsls	r2, r2, #28
 80012d8:	d438      	bmi.n	800134c <__ssvfiscanf_r+0x270>
 80012da:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80012dc:	2b02      	cmp	r3, #2
 80012de:	dc47      	bgt.n	8001370 <__ssvfiscanf_r+0x294>
 80012e0:	466b      	mov	r3, sp
 80012e2:	4622      	mov	r2, r4
 80012e4:	a941      	add	r1, sp, #260	@ 0x104
 80012e6:	4630      	mov	r0, r6
 80012e8:	f000 f9fa 	bl	80016e0 <_scanf_chars>
 80012ec:	2801      	cmp	r0, #1
 80012ee:	d064      	beq.n	80013ba <__ssvfiscanf_r+0x2de>
 80012f0:	2802      	cmp	r0, #2
 80012f2:	f47f af18 	bne.w	8001126 <__ssvfiscanf_r+0x4a>
 80012f6:	e7c9      	b.n	800128c <__ssvfiscanf_r+0x1b0>
 80012f8:	220a      	movs	r2, #10
 80012fa:	e7d7      	b.n	80012ac <__ssvfiscanf_r+0x1d0>
 80012fc:	4629      	mov	r1, r5
 80012fe:	4640      	mov	r0, r8
 8001300:	f000 fb3c 	bl	800197c <__sccl>
 8001304:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800130a:	9341      	str	r3, [sp, #260]	@ 0x104
 800130c:	4605      	mov	r5, r0
 800130e:	2301      	movs	r3, #1
 8001310:	e7d7      	b.n	80012c2 <__ssvfiscanf_r+0x1e6>
 8001312:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001318:	9341      	str	r3, [sp, #260]	@ 0x104
 800131a:	2300      	movs	r3, #0
 800131c:	e7d1      	b.n	80012c2 <__ssvfiscanf_r+0x1e6>
 800131e:	2302      	movs	r3, #2
 8001320:	e7cf      	b.n	80012c2 <__ssvfiscanf_r+0x1e6>
 8001322:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8001324:	06c3      	lsls	r3, r0, #27
 8001326:	f53f aefe 	bmi.w	8001126 <__ssvfiscanf_r+0x4a>
 800132a:	9b00      	ldr	r3, [sp, #0]
 800132c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800132e:	1d19      	adds	r1, r3, #4
 8001330:	9100      	str	r1, [sp, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	07c0      	lsls	r0, r0, #31
 8001336:	bf4c      	ite	mi
 8001338:	801a      	strhmi	r2, [r3, #0]
 800133a:	601a      	strpl	r2, [r3, #0]
 800133c:	e6f3      	b.n	8001126 <__ssvfiscanf_r+0x4a>
 800133e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001340:	4621      	mov	r1, r4
 8001342:	4630      	mov	r0, r6
 8001344:	4798      	blx	r3
 8001346:	2800      	cmp	r0, #0
 8001348:	d0bf      	beq.n	80012ca <__ssvfiscanf_r+0x1ee>
 800134a:	e79f      	b.n	800128c <__ssvfiscanf_r+0x1b0>
 800134c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800134e:	3201      	adds	r2, #1
 8001350:	9245      	str	r2, [sp, #276]	@ 0x114
 8001352:	6862      	ldr	r2, [r4, #4]
 8001354:	3a01      	subs	r2, #1
 8001356:	2a00      	cmp	r2, #0
 8001358:	6062      	str	r2, [r4, #4]
 800135a:	dd02      	ble.n	8001362 <__ssvfiscanf_r+0x286>
 800135c:	3301      	adds	r3, #1
 800135e:	6023      	str	r3, [r4, #0]
 8001360:	e7b6      	b.n	80012d0 <__ssvfiscanf_r+0x1f4>
 8001362:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001364:	4621      	mov	r1, r4
 8001366:	4630      	mov	r0, r6
 8001368:	4798      	blx	r3
 800136a:	2800      	cmp	r0, #0
 800136c:	d0b0      	beq.n	80012d0 <__ssvfiscanf_r+0x1f4>
 800136e:	e78d      	b.n	800128c <__ssvfiscanf_r+0x1b0>
 8001370:	2b04      	cmp	r3, #4
 8001372:	dc0f      	bgt.n	8001394 <__ssvfiscanf_r+0x2b8>
 8001374:	466b      	mov	r3, sp
 8001376:	4622      	mov	r2, r4
 8001378:	a941      	add	r1, sp, #260	@ 0x104
 800137a:	4630      	mov	r0, r6
 800137c:	f000 fa0a 	bl	8001794 <_scanf_i>
 8001380:	e7b4      	b.n	80012ec <__ssvfiscanf_r+0x210>
 8001382:	bf00      	nop
 8001384:	0800102d 	.word	0x0800102d
 8001388:	080010a3 	.word	0x080010a3
 800138c:	08001e3b 	.word	0x08001e3b
 8001390:	08001df2 	.word	0x08001df2
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <__ssvfiscanf_r+0x2e4>)
 8001396:	2b00      	cmp	r3, #0
 8001398:	f43f aec5 	beq.w	8001126 <__ssvfiscanf_r+0x4a>
 800139c:	466b      	mov	r3, sp
 800139e:	4622      	mov	r2, r4
 80013a0:	a941      	add	r1, sp, #260	@ 0x104
 80013a2:	4630      	mov	r0, r6
 80013a4:	f3af 8000 	nop.w
 80013a8:	e7a0      	b.n	80012ec <__ssvfiscanf_r+0x210>
 80013aa:	89a3      	ldrh	r3, [r4, #12]
 80013ac:	065b      	lsls	r3, r3, #25
 80013ae:	f53f af71 	bmi.w	8001294 <__ssvfiscanf_r+0x1b8>
 80013b2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80013b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ba:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80013bc:	e7f9      	b.n	80013b2 <__ssvfiscanf_r+0x2d6>
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <_printf_common>:
 80013c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013c8:	4616      	mov	r6, r2
 80013ca:	4698      	mov	r8, r3
 80013cc:	688a      	ldr	r2, [r1, #8]
 80013ce:	690b      	ldr	r3, [r1, #16]
 80013d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80013d4:	4293      	cmp	r3, r2
 80013d6:	bfb8      	it	lt
 80013d8:	4613      	movlt	r3, r2
 80013da:	6033      	str	r3, [r6, #0]
 80013dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80013e0:	4607      	mov	r7, r0
 80013e2:	460c      	mov	r4, r1
 80013e4:	b10a      	cbz	r2, 80013ea <_printf_common+0x26>
 80013e6:	3301      	adds	r3, #1
 80013e8:	6033      	str	r3, [r6, #0]
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	0699      	lsls	r1, r3, #26
 80013ee:	bf42      	ittt	mi
 80013f0:	6833      	ldrmi	r3, [r6, #0]
 80013f2:	3302      	addmi	r3, #2
 80013f4:	6033      	strmi	r3, [r6, #0]
 80013f6:	6825      	ldr	r5, [r4, #0]
 80013f8:	f015 0506 	ands.w	r5, r5, #6
 80013fc:	d106      	bne.n	800140c <_printf_common+0x48>
 80013fe:	f104 0a19 	add.w	sl, r4, #25
 8001402:	68e3      	ldr	r3, [r4, #12]
 8001404:	6832      	ldr	r2, [r6, #0]
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	42ab      	cmp	r3, r5
 800140a:	dc26      	bgt.n	800145a <_printf_common+0x96>
 800140c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001410:	6822      	ldr	r2, [r4, #0]
 8001412:	3b00      	subs	r3, #0
 8001414:	bf18      	it	ne
 8001416:	2301      	movne	r3, #1
 8001418:	0692      	lsls	r2, r2, #26
 800141a:	d42b      	bmi.n	8001474 <_printf_common+0xb0>
 800141c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001420:	4641      	mov	r1, r8
 8001422:	4638      	mov	r0, r7
 8001424:	47c8      	blx	r9
 8001426:	3001      	adds	r0, #1
 8001428:	d01e      	beq.n	8001468 <_printf_common+0xa4>
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	6922      	ldr	r2, [r4, #16]
 800142e:	f003 0306 	and.w	r3, r3, #6
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf02      	ittt	eq
 8001436:	68e5      	ldreq	r5, [r4, #12]
 8001438:	6833      	ldreq	r3, [r6, #0]
 800143a:	1aed      	subeq	r5, r5, r3
 800143c:	68a3      	ldr	r3, [r4, #8]
 800143e:	bf0c      	ite	eq
 8001440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001444:	2500      	movne	r5, #0
 8001446:	4293      	cmp	r3, r2
 8001448:	bfc4      	itt	gt
 800144a:	1a9b      	subgt	r3, r3, r2
 800144c:	18ed      	addgt	r5, r5, r3
 800144e:	2600      	movs	r6, #0
 8001450:	341a      	adds	r4, #26
 8001452:	42b5      	cmp	r5, r6
 8001454:	d11a      	bne.n	800148c <_printf_common+0xc8>
 8001456:	2000      	movs	r0, #0
 8001458:	e008      	b.n	800146c <_printf_common+0xa8>
 800145a:	2301      	movs	r3, #1
 800145c:	4652      	mov	r2, sl
 800145e:	4641      	mov	r1, r8
 8001460:	4638      	mov	r0, r7
 8001462:	47c8      	blx	r9
 8001464:	3001      	adds	r0, #1
 8001466:	d103      	bne.n	8001470 <_printf_common+0xac>
 8001468:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800146c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001470:	3501      	adds	r5, #1
 8001472:	e7c6      	b.n	8001402 <_printf_common+0x3e>
 8001474:	18e1      	adds	r1, r4, r3
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	2030      	movs	r0, #48	@ 0x30
 800147a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800147e:	4422      	add	r2, r4
 8001480:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001488:	3302      	adds	r3, #2
 800148a:	e7c7      	b.n	800141c <_printf_common+0x58>
 800148c:	2301      	movs	r3, #1
 800148e:	4622      	mov	r2, r4
 8001490:	4641      	mov	r1, r8
 8001492:	4638      	mov	r0, r7
 8001494:	47c8      	blx	r9
 8001496:	3001      	adds	r0, #1
 8001498:	d0e6      	beq.n	8001468 <_printf_common+0xa4>
 800149a:	3601      	adds	r6, #1
 800149c:	e7d9      	b.n	8001452 <_printf_common+0x8e>
	...

080014a0 <_printf_i>:
 80014a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014a4:	7e0f      	ldrb	r7, [r1, #24]
 80014a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80014a8:	2f78      	cmp	r7, #120	@ 0x78
 80014aa:	4691      	mov	r9, r2
 80014ac:	4680      	mov	r8, r0
 80014ae:	460c      	mov	r4, r1
 80014b0:	469a      	mov	sl, r3
 80014b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80014b6:	d807      	bhi.n	80014c8 <_printf_i+0x28>
 80014b8:	2f62      	cmp	r7, #98	@ 0x62
 80014ba:	d80a      	bhi.n	80014d2 <_printf_i+0x32>
 80014bc:	2f00      	cmp	r7, #0
 80014be:	f000 80d2 	beq.w	8001666 <_printf_i+0x1c6>
 80014c2:	2f58      	cmp	r7, #88	@ 0x58
 80014c4:	f000 80b9 	beq.w	800163a <_printf_i+0x19a>
 80014c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80014d0:	e03a      	b.n	8001548 <_printf_i+0xa8>
 80014d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80014d6:	2b15      	cmp	r3, #21
 80014d8:	d8f6      	bhi.n	80014c8 <_printf_i+0x28>
 80014da:	a101      	add	r1, pc, #4	@ (adr r1, 80014e0 <_printf_i+0x40>)
 80014dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80014e0:	08001539 	.word	0x08001539
 80014e4:	0800154d 	.word	0x0800154d
 80014e8:	080014c9 	.word	0x080014c9
 80014ec:	080014c9 	.word	0x080014c9
 80014f0:	080014c9 	.word	0x080014c9
 80014f4:	080014c9 	.word	0x080014c9
 80014f8:	0800154d 	.word	0x0800154d
 80014fc:	080014c9 	.word	0x080014c9
 8001500:	080014c9 	.word	0x080014c9
 8001504:	080014c9 	.word	0x080014c9
 8001508:	080014c9 	.word	0x080014c9
 800150c:	0800164d 	.word	0x0800164d
 8001510:	08001577 	.word	0x08001577
 8001514:	08001607 	.word	0x08001607
 8001518:	080014c9 	.word	0x080014c9
 800151c:	080014c9 	.word	0x080014c9
 8001520:	0800166f 	.word	0x0800166f
 8001524:	080014c9 	.word	0x080014c9
 8001528:	08001577 	.word	0x08001577
 800152c:	080014c9 	.word	0x080014c9
 8001530:	080014c9 	.word	0x080014c9
 8001534:	0800160f 	.word	0x0800160f
 8001538:	6833      	ldr	r3, [r6, #0]
 800153a:	1d1a      	adds	r2, r3, #4
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6032      	str	r2, [r6, #0]
 8001540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001544:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001548:	2301      	movs	r3, #1
 800154a:	e09d      	b.n	8001688 <_printf_i+0x1e8>
 800154c:	6833      	ldr	r3, [r6, #0]
 800154e:	6820      	ldr	r0, [r4, #0]
 8001550:	1d19      	adds	r1, r3, #4
 8001552:	6031      	str	r1, [r6, #0]
 8001554:	0606      	lsls	r6, r0, #24
 8001556:	d501      	bpl.n	800155c <_printf_i+0xbc>
 8001558:	681d      	ldr	r5, [r3, #0]
 800155a:	e003      	b.n	8001564 <_printf_i+0xc4>
 800155c:	0645      	lsls	r5, r0, #25
 800155e:	d5fb      	bpl.n	8001558 <_printf_i+0xb8>
 8001560:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001564:	2d00      	cmp	r5, #0
 8001566:	da03      	bge.n	8001570 <_printf_i+0xd0>
 8001568:	232d      	movs	r3, #45	@ 0x2d
 800156a:	426d      	negs	r5, r5
 800156c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001570:	4859      	ldr	r0, [pc, #356]	@ (80016d8 <_printf_i+0x238>)
 8001572:	230a      	movs	r3, #10
 8001574:	e011      	b.n	800159a <_printf_i+0xfa>
 8001576:	6821      	ldr	r1, [r4, #0]
 8001578:	6833      	ldr	r3, [r6, #0]
 800157a:	0608      	lsls	r0, r1, #24
 800157c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001580:	d402      	bmi.n	8001588 <_printf_i+0xe8>
 8001582:	0649      	lsls	r1, r1, #25
 8001584:	bf48      	it	mi
 8001586:	b2ad      	uxthmi	r5, r5
 8001588:	2f6f      	cmp	r7, #111	@ 0x6f
 800158a:	4853      	ldr	r0, [pc, #332]	@ (80016d8 <_printf_i+0x238>)
 800158c:	6033      	str	r3, [r6, #0]
 800158e:	bf14      	ite	ne
 8001590:	230a      	movne	r3, #10
 8001592:	2308      	moveq	r3, #8
 8001594:	2100      	movs	r1, #0
 8001596:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800159a:	6866      	ldr	r6, [r4, #4]
 800159c:	60a6      	str	r6, [r4, #8]
 800159e:	2e00      	cmp	r6, #0
 80015a0:	bfa2      	ittt	ge
 80015a2:	6821      	ldrge	r1, [r4, #0]
 80015a4:	f021 0104 	bicge.w	r1, r1, #4
 80015a8:	6021      	strge	r1, [r4, #0]
 80015aa:	b90d      	cbnz	r5, 80015b0 <_printf_i+0x110>
 80015ac:	2e00      	cmp	r6, #0
 80015ae:	d04b      	beq.n	8001648 <_printf_i+0x1a8>
 80015b0:	4616      	mov	r6, r2
 80015b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80015b6:	fb03 5711 	mls	r7, r3, r1, r5
 80015ba:	5dc7      	ldrb	r7, [r0, r7]
 80015bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80015c0:	462f      	mov	r7, r5
 80015c2:	42bb      	cmp	r3, r7
 80015c4:	460d      	mov	r5, r1
 80015c6:	d9f4      	bls.n	80015b2 <_printf_i+0x112>
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d10b      	bne.n	80015e4 <_printf_i+0x144>
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	07df      	lsls	r7, r3, #31
 80015d0:	d508      	bpl.n	80015e4 <_printf_i+0x144>
 80015d2:	6923      	ldr	r3, [r4, #16]
 80015d4:	6861      	ldr	r1, [r4, #4]
 80015d6:	4299      	cmp	r1, r3
 80015d8:	bfde      	ittt	le
 80015da:	2330      	movle	r3, #48	@ 0x30
 80015dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80015e0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80015e4:	1b92      	subs	r2, r2, r6
 80015e6:	6122      	str	r2, [r4, #16]
 80015e8:	f8cd a000 	str.w	sl, [sp]
 80015ec:	464b      	mov	r3, r9
 80015ee:	aa03      	add	r2, sp, #12
 80015f0:	4621      	mov	r1, r4
 80015f2:	4640      	mov	r0, r8
 80015f4:	f7ff fee6 	bl	80013c4 <_printf_common>
 80015f8:	3001      	adds	r0, #1
 80015fa:	d14a      	bne.n	8001692 <_printf_i+0x1f2>
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001600:	b004      	add	sp, #16
 8001602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	f043 0320 	orr.w	r3, r3, #32
 800160c:	6023      	str	r3, [r4, #0]
 800160e:	4833      	ldr	r0, [pc, #204]	@ (80016dc <_printf_i+0x23c>)
 8001610:	2778      	movs	r7, #120	@ 0x78
 8001612:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	6831      	ldr	r1, [r6, #0]
 800161a:	061f      	lsls	r7, r3, #24
 800161c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001620:	d402      	bmi.n	8001628 <_printf_i+0x188>
 8001622:	065f      	lsls	r7, r3, #25
 8001624:	bf48      	it	mi
 8001626:	b2ad      	uxthmi	r5, r5
 8001628:	6031      	str	r1, [r6, #0]
 800162a:	07d9      	lsls	r1, r3, #31
 800162c:	bf44      	itt	mi
 800162e:	f043 0320 	orrmi.w	r3, r3, #32
 8001632:	6023      	strmi	r3, [r4, #0]
 8001634:	b11d      	cbz	r5, 800163e <_printf_i+0x19e>
 8001636:	2310      	movs	r3, #16
 8001638:	e7ac      	b.n	8001594 <_printf_i+0xf4>
 800163a:	4827      	ldr	r0, [pc, #156]	@ (80016d8 <_printf_i+0x238>)
 800163c:	e7e9      	b.n	8001612 <_printf_i+0x172>
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	f023 0320 	bic.w	r3, r3, #32
 8001644:	6023      	str	r3, [r4, #0]
 8001646:	e7f6      	b.n	8001636 <_printf_i+0x196>
 8001648:	4616      	mov	r6, r2
 800164a:	e7bd      	b.n	80015c8 <_printf_i+0x128>
 800164c:	6833      	ldr	r3, [r6, #0]
 800164e:	6825      	ldr	r5, [r4, #0]
 8001650:	6961      	ldr	r1, [r4, #20]
 8001652:	1d18      	adds	r0, r3, #4
 8001654:	6030      	str	r0, [r6, #0]
 8001656:	062e      	lsls	r6, r5, #24
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	d501      	bpl.n	8001660 <_printf_i+0x1c0>
 800165c:	6019      	str	r1, [r3, #0]
 800165e:	e002      	b.n	8001666 <_printf_i+0x1c6>
 8001660:	0668      	lsls	r0, r5, #25
 8001662:	d5fb      	bpl.n	800165c <_printf_i+0x1bc>
 8001664:	8019      	strh	r1, [r3, #0]
 8001666:	2300      	movs	r3, #0
 8001668:	6123      	str	r3, [r4, #16]
 800166a:	4616      	mov	r6, r2
 800166c:	e7bc      	b.n	80015e8 <_printf_i+0x148>
 800166e:	6833      	ldr	r3, [r6, #0]
 8001670:	1d1a      	adds	r2, r3, #4
 8001672:	6032      	str	r2, [r6, #0]
 8001674:	681e      	ldr	r6, [r3, #0]
 8001676:	6862      	ldr	r2, [r4, #4]
 8001678:	2100      	movs	r1, #0
 800167a:	4630      	mov	r0, r6
 800167c:	f7fe fdb0 	bl	80001e0 <memchr>
 8001680:	b108      	cbz	r0, 8001686 <_printf_i+0x1e6>
 8001682:	1b80      	subs	r0, r0, r6
 8001684:	6060      	str	r0, [r4, #4]
 8001686:	6863      	ldr	r3, [r4, #4]
 8001688:	6123      	str	r3, [r4, #16]
 800168a:	2300      	movs	r3, #0
 800168c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001690:	e7aa      	b.n	80015e8 <_printf_i+0x148>
 8001692:	6923      	ldr	r3, [r4, #16]
 8001694:	4632      	mov	r2, r6
 8001696:	4649      	mov	r1, r9
 8001698:	4640      	mov	r0, r8
 800169a:	47d0      	blx	sl
 800169c:	3001      	adds	r0, #1
 800169e:	d0ad      	beq.n	80015fc <_printf_i+0x15c>
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	079b      	lsls	r3, r3, #30
 80016a4:	d413      	bmi.n	80016ce <_printf_i+0x22e>
 80016a6:	68e0      	ldr	r0, [r4, #12]
 80016a8:	9b03      	ldr	r3, [sp, #12]
 80016aa:	4298      	cmp	r0, r3
 80016ac:	bfb8      	it	lt
 80016ae:	4618      	movlt	r0, r3
 80016b0:	e7a6      	b.n	8001600 <_printf_i+0x160>
 80016b2:	2301      	movs	r3, #1
 80016b4:	4632      	mov	r2, r6
 80016b6:	4649      	mov	r1, r9
 80016b8:	4640      	mov	r0, r8
 80016ba:	47d0      	blx	sl
 80016bc:	3001      	adds	r0, #1
 80016be:	d09d      	beq.n	80015fc <_printf_i+0x15c>
 80016c0:	3501      	adds	r5, #1
 80016c2:	68e3      	ldr	r3, [r4, #12]
 80016c4:	9903      	ldr	r1, [sp, #12]
 80016c6:	1a5b      	subs	r3, r3, r1
 80016c8:	42ab      	cmp	r3, r5
 80016ca:	dcf2      	bgt.n	80016b2 <_printf_i+0x212>
 80016cc:	e7eb      	b.n	80016a6 <_printf_i+0x206>
 80016ce:	2500      	movs	r5, #0
 80016d0:	f104 0619 	add.w	r6, r4, #25
 80016d4:	e7f5      	b.n	80016c2 <_printf_i+0x222>
 80016d6:	bf00      	nop
 80016d8:	08001dfd 	.word	0x08001dfd
 80016dc:	08001e0e 	.word	0x08001e0e

080016e0 <_scanf_chars>:
 80016e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016e4:	4615      	mov	r5, r2
 80016e6:	688a      	ldr	r2, [r1, #8]
 80016e8:	4680      	mov	r8, r0
 80016ea:	460c      	mov	r4, r1
 80016ec:	b932      	cbnz	r2, 80016fc <_scanf_chars+0x1c>
 80016ee:	698a      	ldr	r2, [r1, #24]
 80016f0:	2a00      	cmp	r2, #0
 80016f2:	bf14      	ite	ne
 80016f4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80016f8:	2201      	moveq	r2, #1
 80016fa:	608a      	str	r2, [r1, #8]
 80016fc:	6822      	ldr	r2, [r4, #0]
 80016fe:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8001790 <_scanf_chars+0xb0>
 8001702:	06d1      	lsls	r1, r2, #27
 8001704:	bf5f      	itttt	pl
 8001706:	681a      	ldrpl	r2, [r3, #0]
 8001708:	1d11      	addpl	r1, r2, #4
 800170a:	6019      	strpl	r1, [r3, #0]
 800170c:	6816      	ldrpl	r6, [r2, #0]
 800170e:	2700      	movs	r7, #0
 8001710:	69a0      	ldr	r0, [r4, #24]
 8001712:	b188      	cbz	r0, 8001738 <_scanf_chars+0x58>
 8001714:	2801      	cmp	r0, #1
 8001716:	d107      	bne.n	8001728 <_scanf_chars+0x48>
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	6963      	ldr	r3, [r4, #20]
 800171e:	5c9b      	ldrb	r3, [r3, r2]
 8001720:	b953      	cbnz	r3, 8001738 <_scanf_chars+0x58>
 8001722:	2f00      	cmp	r7, #0
 8001724:	d031      	beq.n	800178a <_scanf_chars+0xaa>
 8001726:	e022      	b.n	800176e <_scanf_chars+0x8e>
 8001728:	2802      	cmp	r0, #2
 800172a:	d120      	bne.n	800176e <_scanf_chars+0x8e>
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001734:	071b      	lsls	r3, r3, #28
 8001736:	d41a      	bmi.n	800176e <_scanf_chars+0x8e>
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	06da      	lsls	r2, r3, #27
 800173c:	bf5e      	ittt	pl
 800173e:	682b      	ldrpl	r3, [r5, #0]
 8001740:	781b      	ldrbpl	r3, [r3, #0]
 8001742:	f806 3b01 	strbpl.w	r3, [r6], #1
 8001746:	682a      	ldr	r2, [r5, #0]
 8001748:	686b      	ldr	r3, [r5, #4]
 800174a:	3201      	adds	r2, #1
 800174c:	602a      	str	r2, [r5, #0]
 800174e:	68a2      	ldr	r2, [r4, #8]
 8001750:	3b01      	subs	r3, #1
 8001752:	3a01      	subs	r2, #1
 8001754:	606b      	str	r3, [r5, #4]
 8001756:	3701      	adds	r7, #1
 8001758:	60a2      	str	r2, [r4, #8]
 800175a:	b142      	cbz	r2, 800176e <_scanf_chars+0x8e>
 800175c:	2b00      	cmp	r3, #0
 800175e:	dcd7      	bgt.n	8001710 <_scanf_chars+0x30>
 8001760:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8001764:	4629      	mov	r1, r5
 8001766:	4640      	mov	r0, r8
 8001768:	4798      	blx	r3
 800176a:	2800      	cmp	r0, #0
 800176c:	d0d0      	beq.n	8001710 <_scanf_chars+0x30>
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	f013 0310 	ands.w	r3, r3, #16
 8001774:	d105      	bne.n	8001782 <_scanf_chars+0xa2>
 8001776:	68e2      	ldr	r2, [r4, #12]
 8001778:	3201      	adds	r2, #1
 800177a:	60e2      	str	r2, [r4, #12]
 800177c:	69a2      	ldr	r2, [r4, #24]
 800177e:	b102      	cbz	r2, 8001782 <_scanf_chars+0xa2>
 8001780:	7033      	strb	r3, [r6, #0]
 8001782:	6923      	ldr	r3, [r4, #16]
 8001784:	443b      	add	r3, r7
 8001786:	6123      	str	r3, [r4, #16]
 8001788:	2000      	movs	r0, #0
 800178a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800178e:	bf00      	nop
 8001790:	08001e3b 	.word	0x08001e3b

08001794 <_scanf_i>:
 8001794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001798:	4698      	mov	r8, r3
 800179a:	4b74      	ldr	r3, [pc, #464]	@ (800196c <_scanf_i+0x1d8>)
 800179c:	460c      	mov	r4, r1
 800179e:	4682      	mov	sl, r0
 80017a0:	4616      	mov	r6, r2
 80017a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017a6:	b087      	sub	sp, #28
 80017a8:	ab03      	add	r3, sp, #12
 80017aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017ae:	4b70      	ldr	r3, [pc, #448]	@ (8001970 <_scanf_i+0x1dc>)
 80017b0:	69a1      	ldr	r1, [r4, #24]
 80017b2:	4a70      	ldr	r2, [pc, #448]	@ (8001974 <_scanf_i+0x1e0>)
 80017b4:	2903      	cmp	r1, #3
 80017b6:	bf08      	it	eq
 80017b8:	461a      	moveq	r2, r3
 80017ba:	68a3      	ldr	r3, [r4, #8]
 80017bc:	9201      	str	r2, [sp, #4]
 80017be:	1e5a      	subs	r2, r3, #1
 80017c0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80017c4:	bf88      	it	hi
 80017c6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80017ca:	4627      	mov	r7, r4
 80017cc:	bf82      	ittt	hi
 80017ce:	eb03 0905 	addhi.w	r9, r3, r5
 80017d2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80017d6:	60a3      	strhi	r3, [r4, #8]
 80017d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80017dc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80017e0:	bf98      	it	ls
 80017e2:	f04f 0900 	movls.w	r9, #0
 80017e6:	6023      	str	r3, [r4, #0]
 80017e8:	463d      	mov	r5, r7
 80017ea:	f04f 0b00 	mov.w	fp, #0
 80017ee:	6831      	ldr	r1, [r6, #0]
 80017f0:	ab03      	add	r3, sp, #12
 80017f2:	7809      	ldrb	r1, [r1, #0]
 80017f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f7fe fcf1 	bl	80001e0 <memchr>
 80017fe:	b328      	cbz	r0, 800184c <_scanf_i+0xb8>
 8001800:	f1bb 0f01 	cmp.w	fp, #1
 8001804:	d159      	bne.n	80018ba <_scanf_i+0x126>
 8001806:	6862      	ldr	r2, [r4, #4]
 8001808:	b92a      	cbnz	r2, 8001816 <_scanf_i+0x82>
 800180a:	6822      	ldr	r2, [r4, #0]
 800180c:	2108      	movs	r1, #8
 800180e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001812:	6061      	str	r1, [r4, #4]
 8001814:	6022      	str	r2, [r4, #0]
 8001816:	6822      	ldr	r2, [r4, #0]
 8001818:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800181c:	6022      	str	r2, [r4, #0]
 800181e:	68a2      	ldr	r2, [r4, #8]
 8001820:	1e51      	subs	r1, r2, #1
 8001822:	60a1      	str	r1, [r4, #8]
 8001824:	b192      	cbz	r2, 800184c <_scanf_i+0xb8>
 8001826:	6832      	ldr	r2, [r6, #0]
 8001828:	1c51      	adds	r1, r2, #1
 800182a:	6031      	str	r1, [r6, #0]
 800182c:	7812      	ldrb	r2, [r2, #0]
 800182e:	f805 2b01 	strb.w	r2, [r5], #1
 8001832:	6872      	ldr	r2, [r6, #4]
 8001834:	3a01      	subs	r2, #1
 8001836:	2a00      	cmp	r2, #0
 8001838:	6072      	str	r2, [r6, #4]
 800183a:	dc07      	bgt.n	800184c <_scanf_i+0xb8>
 800183c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8001840:	4631      	mov	r1, r6
 8001842:	4650      	mov	r0, sl
 8001844:	4790      	blx	r2
 8001846:	2800      	cmp	r0, #0
 8001848:	f040 8085 	bne.w	8001956 <_scanf_i+0x1c2>
 800184c:	f10b 0b01 	add.w	fp, fp, #1
 8001850:	f1bb 0f03 	cmp.w	fp, #3
 8001854:	d1cb      	bne.n	80017ee <_scanf_i+0x5a>
 8001856:	6863      	ldr	r3, [r4, #4]
 8001858:	b90b      	cbnz	r3, 800185e <_scanf_i+0xca>
 800185a:	230a      	movs	r3, #10
 800185c:	6063      	str	r3, [r4, #4]
 800185e:	6863      	ldr	r3, [r4, #4]
 8001860:	4945      	ldr	r1, [pc, #276]	@ (8001978 <_scanf_i+0x1e4>)
 8001862:	6960      	ldr	r0, [r4, #20]
 8001864:	1ac9      	subs	r1, r1, r3
 8001866:	f000 f889 	bl	800197c <__sccl>
 800186a:	f04f 0b00 	mov.w	fp, #0
 800186e:	68a3      	ldr	r3, [r4, #8]
 8001870:	6822      	ldr	r2, [r4, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d03d      	beq.n	80018f2 <_scanf_i+0x15e>
 8001876:	6831      	ldr	r1, [r6, #0]
 8001878:	6960      	ldr	r0, [r4, #20]
 800187a:	f891 c000 	ldrb.w	ip, [r1]
 800187e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8001882:	2800      	cmp	r0, #0
 8001884:	d035      	beq.n	80018f2 <_scanf_i+0x15e>
 8001886:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800188a:	d124      	bne.n	80018d6 <_scanf_i+0x142>
 800188c:	0510      	lsls	r0, r2, #20
 800188e:	d522      	bpl.n	80018d6 <_scanf_i+0x142>
 8001890:	f10b 0b01 	add.w	fp, fp, #1
 8001894:	f1b9 0f00 	cmp.w	r9, #0
 8001898:	d003      	beq.n	80018a2 <_scanf_i+0x10e>
 800189a:	3301      	adds	r3, #1
 800189c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80018a0:	60a3      	str	r3, [r4, #8]
 80018a2:	6873      	ldr	r3, [r6, #4]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	6073      	str	r3, [r6, #4]
 80018aa:	dd1b      	ble.n	80018e4 <_scanf_i+0x150>
 80018ac:	6833      	ldr	r3, [r6, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	6033      	str	r3, [r6, #0]
 80018b2:	68a3      	ldr	r3, [r4, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60a3      	str	r3, [r4, #8]
 80018b8:	e7d9      	b.n	800186e <_scanf_i+0xda>
 80018ba:	f1bb 0f02 	cmp.w	fp, #2
 80018be:	d1ae      	bne.n	800181e <_scanf_i+0x8a>
 80018c0:	6822      	ldr	r2, [r4, #0]
 80018c2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80018c6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80018ca:	d1bf      	bne.n	800184c <_scanf_i+0xb8>
 80018cc:	2110      	movs	r1, #16
 80018ce:	6061      	str	r1, [r4, #4]
 80018d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018d4:	e7a2      	b.n	800181c <_scanf_i+0x88>
 80018d6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80018da:	6022      	str	r2, [r4, #0]
 80018dc:	780b      	ldrb	r3, [r1, #0]
 80018de:	f805 3b01 	strb.w	r3, [r5], #1
 80018e2:	e7de      	b.n	80018a2 <_scanf_i+0x10e>
 80018e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80018e8:	4631      	mov	r1, r6
 80018ea:	4650      	mov	r0, sl
 80018ec:	4798      	blx	r3
 80018ee:	2800      	cmp	r0, #0
 80018f0:	d0df      	beq.n	80018b2 <_scanf_i+0x11e>
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	05d9      	lsls	r1, r3, #23
 80018f6:	d50d      	bpl.n	8001914 <_scanf_i+0x180>
 80018f8:	42bd      	cmp	r5, r7
 80018fa:	d909      	bls.n	8001910 <_scanf_i+0x17c>
 80018fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001900:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8001904:	4632      	mov	r2, r6
 8001906:	4650      	mov	r0, sl
 8001908:	4798      	blx	r3
 800190a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800190e:	464d      	mov	r5, r9
 8001910:	42bd      	cmp	r5, r7
 8001912:	d028      	beq.n	8001966 <_scanf_i+0x1d2>
 8001914:	6822      	ldr	r2, [r4, #0]
 8001916:	f012 0210 	ands.w	r2, r2, #16
 800191a:	d113      	bne.n	8001944 <_scanf_i+0x1b0>
 800191c:	702a      	strb	r2, [r5, #0]
 800191e:	6863      	ldr	r3, [r4, #4]
 8001920:	9e01      	ldr	r6, [sp, #4]
 8001922:	4639      	mov	r1, r7
 8001924:	4650      	mov	r0, sl
 8001926:	47b0      	blx	r6
 8001928:	f8d8 3000 	ldr.w	r3, [r8]
 800192c:	6821      	ldr	r1, [r4, #0]
 800192e:	1d1a      	adds	r2, r3, #4
 8001930:	f8c8 2000 	str.w	r2, [r8]
 8001934:	f011 0f20 	tst.w	r1, #32
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	d00f      	beq.n	800195c <_scanf_i+0x1c8>
 800193c:	6018      	str	r0, [r3, #0]
 800193e:	68e3      	ldr	r3, [r4, #12]
 8001940:	3301      	adds	r3, #1
 8001942:	60e3      	str	r3, [r4, #12]
 8001944:	6923      	ldr	r3, [r4, #16]
 8001946:	1bed      	subs	r5, r5, r7
 8001948:	445d      	add	r5, fp
 800194a:	442b      	add	r3, r5
 800194c:	6123      	str	r3, [r4, #16]
 800194e:	2000      	movs	r0, #0
 8001950:	b007      	add	sp, #28
 8001952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001956:	f04f 0b00 	mov.w	fp, #0
 800195a:	e7ca      	b.n	80018f2 <_scanf_i+0x15e>
 800195c:	07ca      	lsls	r2, r1, #31
 800195e:	bf4c      	ite	mi
 8001960:	8018      	strhmi	r0, [r3, #0]
 8001962:	6018      	strpl	r0, [r3, #0]
 8001964:	e7eb      	b.n	800193e <_scanf_i+0x1aa>
 8001966:	2001      	movs	r0, #1
 8001968:	e7f2      	b.n	8001950 <_scanf_i+0x1bc>
 800196a:	bf00      	nop
 800196c:	08001de0 	.word	0x08001de0
 8001970:	08001c25 	.word	0x08001c25
 8001974:	08001d05 	.word	0x08001d05
 8001978:	08001e2f 	.word	0x08001e2f

0800197c <__sccl>:
 800197c:	b570      	push	{r4, r5, r6, lr}
 800197e:	780b      	ldrb	r3, [r1, #0]
 8001980:	4604      	mov	r4, r0
 8001982:	2b5e      	cmp	r3, #94	@ 0x5e
 8001984:	bf0b      	itete	eq
 8001986:	784b      	ldrbeq	r3, [r1, #1]
 8001988:	1c4a      	addne	r2, r1, #1
 800198a:	1c8a      	addeq	r2, r1, #2
 800198c:	2100      	movne	r1, #0
 800198e:	bf08      	it	eq
 8001990:	2101      	moveq	r1, #1
 8001992:	3801      	subs	r0, #1
 8001994:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8001998:	f800 1f01 	strb.w	r1, [r0, #1]!
 800199c:	42a8      	cmp	r0, r5
 800199e:	d1fb      	bne.n	8001998 <__sccl+0x1c>
 80019a0:	b90b      	cbnz	r3, 80019a6 <__sccl+0x2a>
 80019a2:	1e50      	subs	r0, r2, #1
 80019a4:	bd70      	pop	{r4, r5, r6, pc}
 80019a6:	f081 0101 	eor.w	r1, r1, #1
 80019aa:	54e1      	strb	r1, [r4, r3]
 80019ac:	4610      	mov	r0, r2
 80019ae:	4602      	mov	r2, r0
 80019b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80019b4:	2d2d      	cmp	r5, #45	@ 0x2d
 80019b6:	d005      	beq.n	80019c4 <__sccl+0x48>
 80019b8:	2d5d      	cmp	r5, #93	@ 0x5d
 80019ba:	d016      	beq.n	80019ea <__sccl+0x6e>
 80019bc:	2d00      	cmp	r5, #0
 80019be:	d0f1      	beq.n	80019a4 <__sccl+0x28>
 80019c0:	462b      	mov	r3, r5
 80019c2:	e7f2      	b.n	80019aa <__sccl+0x2e>
 80019c4:	7846      	ldrb	r6, [r0, #1]
 80019c6:	2e5d      	cmp	r6, #93	@ 0x5d
 80019c8:	d0fa      	beq.n	80019c0 <__sccl+0x44>
 80019ca:	42b3      	cmp	r3, r6
 80019cc:	dcf8      	bgt.n	80019c0 <__sccl+0x44>
 80019ce:	3002      	adds	r0, #2
 80019d0:	461a      	mov	r2, r3
 80019d2:	3201      	adds	r2, #1
 80019d4:	4296      	cmp	r6, r2
 80019d6:	54a1      	strb	r1, [r4, r2]
 80019d8:	dcfb      	bgt.n	80019d2 <__sccl+0x56>
 80019da:	1af2      	subs	r2, r6, r3
 80019dc:	3a01      	subs	r2, #1
 80019de:	1c5d      	adds	r5, r3, #1
 80019e0:	42b3      	cmp	r3, r6
 80019e2:	bfa8      	it	ge
 80019e4:	2200      	movge	r2, #0
 80019e6:	18ab      	adds	r3, r5, r2
 80019e8:	e7e1      	b.n	80019ae <__sccl+0x32>
 80019ea:	4610      	mov	r0, r2
 80019ec:	e7da      	b.n	80019a4 <__sccl+0x28>

080019ee <__submore>:
 80019ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f2:	460c      	mov	r4, r1
 80019f4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80019f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80019fa:	4299      	cmp	r1, r3
 80019fc:	d11d      	bne.n	8001a3a <__submore+0x4c>
 80019fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a02:	f7ff f92f 	bl	8000c64 <_malloc_r>
 8001a06:	b918      	cbnz	r0, 8001a10 <__submore+0x22>
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a14:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001a16:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8001a1a:	6360      	str	r0, [r4, #52]	@ 0x34
 8001a1c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8001a20:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001a24:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8001a28:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001a2c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8001a30:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8001a34:	6020      	str	r0, [r4, #0]
 8001a36:	2000      	movs	r0, #0
 8001a38:	e7e8      	b.n	8001a0c <__submore+0x1e>
 8001a3a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8001a3c:	0077      	lsls	r7, r6, #1
 8001a3e:	463a      	mov	r2, r7
 8001a40:	f000 f848 	bl	8001ad4 <_realloc_r>
 8001a44:	4605      	mov	r5, r0
 8001a46:	2800      	cmp	r0, #0
 8001a48:	d0de      	beq.n	8001a08 <__submore+0x1a>
 8001a4a:	eb00 0806 	add.w	r8, r0, r6
 8001a4e:	4601      	mov	r1, r0
 8001a50:	4632      	mov	r2, r6
 8001a52:	4640      	mov	r0, r8
 8001a54:	f000 f830 	bl	8001ab8 <memcpy>
 8001a58:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8001a5c:	f8c4 8000 	str.w	r8, [r4]
 8001a60:	e7e9      	b.n	8001a36 <__submore+0x48>

08001a62 <memmove>:
 8001a62:	4288      	cmp	r0, r1
 8001a64:	b510      	push	{r4, lr}
 8001a66:	eb01 0402 	add.w	r4, r1, r2
 8001a6a:	d902      	bls.n	8001a72 <memmove+0x10>
 8001a6c:	4284      	cmp	r4, r0
 8001a6e:	4623      	mov	r3, r4
 8001a70:	d807      	bhi.n	8001a82 <memmove+0x20>
 8001a72:	1e43      	subs	r3, r0, #1
 8001a74:	42a1      	cmp	r1, r4
 8001a76:	d008      	beq.n	8001a8a <memmove+0x28>
 8001a78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a80:	e7f8      	b.n	8001a74 <memmove+0x12>
 8001a82:	4402      	add	r2, r0
 8001a84:	4601      	mov	r1, r0
 8001a86:	428a      	cmp	r2, r1
 8001a88:	d100      	bne.n	8001a8c <memmove+0x2a>
 8001a8a:	bd10      	pop	{r4, pc}
 8001a8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001a90:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001a94:	e7f7      	b.n	8001a86 <memmove+0x24>
	...

08001a98 <_sbrk_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	4d06      	ldr	r5, [pc, #24]	@ (8001ab4 <_sbrk_r+0x1c>)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	602b      	str	r3, [r5, #0]
 8001aa4:	f7fe ff64 	bl	8000970 <_sbrk>
 8001aa8:	1c43      	adds	r3, r0, #1
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk_r+0x1a>
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	b103      	cbz	r3, 8001ab2 <_sbrk_r+0x1a>
 8001ab0:	6023      	str	r3, [r4, #0]
 8001ab2:	bd38      	pop	{r3, r4, r5, pc}
 8001ab4:	200001ac 	.word	0x200001ac

08001ab8 <memcpy>:
 8001ab8:	440a      	add	r2, r1
 8001aba:	4291      	cmp	r1, r2
 8001abc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001ac0:	d100      	bne.n	8001ac4 <memcpy+0xc>
 8001ac2:	4770      	bx	lr
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ace:	4291      	cmp	r1, r2
 8001ad0:	d1f9      	bne.n	8001ac6 <memcpy+0xe>
 8001ad2:	bd10      	pop	{r4, pc}

08001ad4 <_realloc_r>:
 8001ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad8:	4680      	mov	r8, r0
 8001ada:	4615      	mov	r5, r2
 8001adc:	460c      	mov	r4, r1
 8001ade:	b921      	cbnz	r1, 8001aea <_realloc_r+0x16>
 8001ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	f7ff b8bd 	b.w	8000c64 <_malloc_r>
 8001aea:	b92a      	cbnz	r2, 8001af8 <_realloc_r+0x24>
 8001aec:	f7ff f84e 	bl	8000b8c <_free_r>
 8001af0:	2400      	movs	r4, #0
 8001af2:	4620      	mov	r0, r4
 8001af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001af8:	f000 f906 	bl	8001d08 <_malloc_usable_size_r>
 8001afc:	4285      	cmp	r5, r0
 8001afe:	4606      	mov	r6, r0
 8001b00:	d802      	bhi.n	8001b08 <_realloc_r+0x34>
 8001b02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001b06:	d8f4      	bhi.n	8001af2 <_realloc_r+0x1e>
 8001b08:	4629      	mov	r1, r5
 8001b0a:	4640      	mov	r0, r8
 8001b0c:	f7ff f8aa 	bl	8000c64 <_malloc_r>
 8001b10:	4607      	mov	r7, r0
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d0ec      	beq.n	8001af0 <_realloc_r+0x1c>
 8001b16:	42b5      	cmp	r5, r6
 8001b18:	462a      	mov	r2, r5
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	bf28      	it	cs
 8001b1e:	4632      	movcs	r2, r6
 8001b20:	f7ff ffca 	bl	8001ab8 <memcpy>
 8001b24:	4621      	mov	r1, r4
 8001b26:	4640      	mov	r0, r8
 8001b28:	f7ff f830 	bl	8000b8c <_free_r>
 8001b2c:	463c      	mov	r4, r7
 8001b2e:	e7e0      	b.n	8001af2 <_realloc_r+0x1e>

08001b30 <_strtol_l.constprop.0>:
 8001b30:	2b24      	cmp	r3, #36	@ 0x24
 8001b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b36:	4686      	mov	lr, r0
 8001b38:	4690      	mov	r8, r2
 8001b3a:	d801      	bhi.n	8001b40 <_strtol_l.constprop.0+0x10>
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d106      	bne.n	8001b4e <_strtol_l.constprop.0+0x1e>
 8001b40:	f7fe fff8 	bl	8000b34 <__errno>
 8001b44:	2316      	movs	r3, #22
 8001b46:	6003      	str	r3, [r0, #0]
 8001b48:	2000      	movs	r0, #0
 8001b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b4e:	4834      	ldr	r0, [pc, #208]	@ (8001c20 <_strtol_l.constprop.0+0xf0>)
 8001b50:	460d      	mov	r5, r1
 8001b52:	462a      	mov	r2, r5
 8001b54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001b58:	5d06      	ldrb	r6, [r0, r4]
 8001b5a:	f016 0608 	ands.w	r6, r6, #8
 8001b5e:	d1f8      	bne.n	8001b52 <_strtol_l.constprop.0+0x22>
 8001b60:	2c2d      	cmp	r4, #45	@ 0x2d
 8001b62:	d12d      	bne.n	8001bc0 <_strtol_l.constprop.0+0x90>
 8001b64:	782c      	ldrb	r4, [r5, #0]
 8001b66:	2601      	movs	r6, #1
 8001b68:	1c95      	adds	r5, r2, #2
 8001b6a:	f033 0210 	bics.w	r2, r3, #16
 8001b6e:	d109      	bne.n	8001b84 <_strtol_l.constprop.0+0x54>
 8001b70:	2c30      	cmp	r4, #48	@ 0x30
 8001b72:	d12a      	bne.n	8001bca <_strtol_l.constprop.0+0x9a>
 8001b74:	782a      	ldrb	r2, [r5, #0]
 8001b76:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001b7a:	2a58      	cmp	r2, #88	@ 0x58
 8001b7c:	d125      	bne.n	8001bca <_strtol_l.constprop.0+0x9a>
 8001b7e:	786c      	ldrb	r4, [r5, #1]
 8001b80:	2310      	movs	r3, #16
 8001b82:	3502      	adds	r5, #2
 8001b84:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001b88:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	fbbc f9f3 	udiv	r9, ip, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	fb03 ca19 	mls	sl, r3, r9, ip
 8001b98:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8001b9c:	2f09      	cmp	r7, #9
 8001b9e:	d81b      	bhi.n	8001bd8 <_strtol_l.constprop.0+0xa8>
 8001ba0:	463c      	mov	r4, r7
 8001ba2:	42a3      	cmp	r3, r4
 8001ba4:	dd27      	ble.n	8001bf6 <_strtol_l.constprop.0+0xc6>
 8001ba6:	1c57      	adds	r7, r2, #1
 8001ba8:	d007      	beq.n	8001bba <_strtol_l.constprop.0+0x8a>
 8001baa:	4581      	cmp	r9, r0
 8001bac:	d320      	bcc.n	8001bf0 <_strtol_l.constprop.0+0xc0>
 8001bae:	d101      	bne.n	8001bb4 <_strtol_l.constprop.0+0x84>
 8001bb0:	45a2      	cmp	sl, r4
 8001bb2:	db1d      	blt.n	8001bf0 <_strtol_l.constprop.0+0xc0>
 8001bb4:	fb00 4003 	mla	r0, r0, r3, r4
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001bbe:	e7eb      	b.n	8001b98 <_strtol_l.constprop.0+0x68>
 8001bc0:	2c2b      	cmp	r4, #43	@ 0x2b
 8001bc2:	bf04      	itt	eq
 8001bc4:	782c      	ldrbeq	r4, [r5, #0]
 8001bc6:	1c95      	addeq	r5, r2, #2
 8001bc8:	e7cf      	b.n	8001b6a <_strtol_l.constprop.0+0x3a>
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1da      	bne.n	8001b84 <_strtol_l.constprop.0+0x54>
 8001bce:	2c30      	cmp	r4, #48	@ 0x30
 8001bd0:	bf0c      	ite	eq
 8001bd2:	2308      	moveq	r3, #8
 8001bd4:	230a      	movne	r3, #10
 8001bd6:	e7d5      	b.n	8001b84 <_strtol_l.constprop.0+0x54>
 8001bd8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001bdc:	2f19      	cmp	r7, #25
 8001bde:	d801      	bhi.n	8001be4 <_strtol_l.constprop.0+0xb4>
 8001be0:	3c37      	subs	r4, #55	@ 0x37
 8001be2:	e7de      	b.n	8001ba2 <_strtol_l.constprop.0+0x72>
 8001be4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001be8:	2f19      	cmp	r7, #25
 8001bea:	d804      	bhi.n	8001bf6 <_strtol_l.constprop.0+0xc6>
 8001bec:	3c57      	subs	r4, #87	@ 0x57
 8001bee:	e7d8      	b.n	8001ba2 <_strtol_l.constprop.0+0x72>
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bf4:	e7e1      	b.n	8001bba <_strtol_l.constprop.0+0x8a>
 8001bf6:	1c53      	adds	r3, r2, #1
 8001bf8:	d108      	bne.n	8001c0c <_strtol_l.constprop.0+0xdc>
 8001bfa:	2322      	movs	r3, #34	@ 0x22
 8001bfc:	f8ce 3000 	str.w	r3, [lr]
 8001c00:	4660      	mov	r0, ip
 8001c02:	f1b8 0f00 	cmp.w	r8, #0
 8001c06:	d0a0      	beq.n	8001b4a <_strtol_l.constprop.0+0x1a>
 8001c08:	1e69      	subs	r1, r5, #1
 8001c0a:	e006      	b.n	8001c1a <_strtol_l.constprop.0+0xea>
 8001c0c:	b106      	cbz	r6, 8001c10 <_strtol_l.constprop.0+0xe0>
 8001c0e:	4240      	negs	r0, r0
 8001c10:	f1b8 0f00 	cmp.w	r8, #0
 8001c14:	d099      	beq.n	8001b4a <_strtol_l.constprop.0+0x1a>
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	d1f6      	bne.n	8001c08 <_strtol_l.constprop.0+0xd8>
 8001c1a:	f8c8 1000 	str.w	r1, [r8]
 8001c1e:	e794      	b.n	8001b4a <_strtol_l.constprop.0+0x1a>
 8001c20:	08001e3b 	.word	0x08001e3b

08001c24 <_strtol_r>:
 8001c24:	f7ff bf84 	b.w	8001b30 <_strtol_l.constprop.0>

08001c28 <_strtoul_l.constprop.0>:
 8001c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c2c:	4e34      	ldr	r6, [pc, #208]	@ (8001d00 <_strtoul_l.constprop.0+0xd8>)
 8001c2e:	4686      	mov	lr, r0
 8001c30:	460d      	mov	r5, r1
 8001c32:	4628      	mov	r0, r5
 8001c34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001c38:	5d37      	ldrb	r7, [r6, r4]
 8001c3a:	f017 0708 	ands.w	r7, r7, #8
 8001c3e:	d1f8      	bne.n	8001c32 <_strtoul_l.constprop.0+0xa>
 8001c40:	2c2d      	cmp	r4, #45	@ 0x2d
 8001c42:	d12f      	bne.n	8001ca4 <_strtoul_l.constprop.0+0x7c>
 8001c44:	782c      	ldrb	r4, [r5, #0]
 8001c46:	2701      	movs	r7, #1
 8001c48:	1c85      	adds	r5, r0, #2
 8001c4a:	f033 0010 	bics.w	r0, r3, #16
 8001c4e:	d109      	bne.n	8001c64 <_strtoul_l.constprop.0+0x3c>
 8001c50:	2c30      	cmp	r4, #48	@ 0x30
 8001c52:	d12c      	bne.n	8001cae <_strtoul_l.constprop.0+0x86>
 8001c54:	7828      	ldrb	r0, [r5, #0]
 8001c56:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8001c5a:	2858      	cmp	r0, #88	@ 0x58
 8001c5c:	d127      	bne.n	8001cae <_strtoul_l.constprop.0+0x86>
 8001c5e:	786c      	ldrb	r4, [r5, #1]
 8001c60:	2310      	movs	r3, #16
 8001c62:	3502      	adds	r5, #2
 8001c64:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8001c68:	2600      	movs	r6, #0
 8001c6a:	fbb8 f8f3 	udiv	r8, r8, r3
 8001c6e:	fb03 f908 	mul.w	r9, r3, r8
 8001c72:	ea6f 0909 	mvn.w	r9, r9
 8001c76:	4630      	mov	r0, r6
 8001c78:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8001c7c:	f1bc 0f09 	cmp.w	ip, #9
 8001c80:	d81c      	bhi.n	8001cbc <_strtoul_l.constprop.0+0x94>
 8001c82:	4664      	mov	r4, ip
 8001c84:	42a3      	cmp	r3, r4
 8001c86:	dd2a      	ble.n	8001cde <_strtoul_l.constprop.0+0xb6>
 8001c88:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8001c8c:	d007      	beq.n	8001c9e <_strtoul_l.constprop.0+0x76>
 8001c8e:	4580      	cmp	r8, r0
 8001c90:	d322      	bcc.n	8001cd8 <_strtoul_l.constprop.0+0xb0>
 8001c92:	d101      	bne.n	8001c98 <_strtoul_l.constprop.0+0x70>
 8001c94:	45a1      	cmp	r9, r4
 8001c96:	db1f      	blt.n	8001cd8 <_strtoul_l.constprop.0+0xb0>
 8001c98:	fb00 4003 	mla	r0, r0, r3, r4
 8001c9c:	2601      	movs	r6, #1
 8001c9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001ca2:	e7e9      	b.n	8001c78 <_strtoul_l.constprop.0+0x50>
 8001ca4:	2c2b      	cmp	r4, #43	@ 0x2b
 8001ca6:	bf04      	itt	eq
 8001ca8:	782c      	ldrbeq	r4, [r5, #0]
 8001caa:	1c85      	addeq	r5, r0, #2
 8001cac:	e7cd      	b.n	8001c4a <_strtoul_l.constprop.0+0x22>
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1d8      	bne.n	8001c64 <_strtoul_l.constprop.0+0x3c>
 8001cb2:	2c30      	cmp	r4, #48	@ 0x30
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2308      	moveq	r3, #8
 8001cb8:	230a      	movne	r3, #10
 8001cba:	e7d3      	b.n	8001c64 <_strtoul_l.constprop.0+0x3c>
 8001cbc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8001cc0:	f1bc 0f19 	cmp.w	ip, #25
 8001cc4:	d801      	bhi.n	8001cca <_strtoul_l.constprop.0+0xa2>
 8001cc6:	3c37      	subs	r4, #55	@ 0x37
 8001cc8:	e7dc      	b.n	8001c84 <_strtoul_l.constprop.0+0x5c>
 8001cca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8001cce:	f1bc 0f19 	cmp.w	ip, #25
 8001cd2:	d804      	bhi.n	8001cde <_strtoul_l.constprop.0+0xb6>
 8001cd4:	3c57      	subs	r4, #87	@ 0x57
 8001cd6:	e7d5      	b.n	8001c84 <_strtoul_l.constprop.0+0x5c>
 8001cd8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001cdc:	e7df      	b.n	8001c9e <_strtoul_l.constprop.0+0x76>
 8001cde:	1c73      	adds	r3, r6, #1
 8001ce0:	d106      	bne.n	8001cf0 <_strtoul_l.constprop.0+0xc8>
 8001ce2:	2322      	movs	r3, #34	@ 0x22
 8001ce4:	f8ce 3000 	str.w	r3, [lr]
 8001ce8:	4630      	mov	r0, r6
 8001cea:	b932      	cbnz	r2, 8001cfa <_strtoul_l.constprop.0+0xd2>
 8001cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cf0:	b107      	cbz	r7, 8001cf4 <_strtoul_l.constprop.0+0xcc>
 8001cf2:	4240      	negs	r0, r0
 8001cf4:	2a00      	cmp	r2, #0
 8001cf6:	d0f9      	beq.n	8001cec <_strtoul_l.constprop.0+0xc4>
 8001cf8:	b106      	cbz	r6, 8001cfc <_strtoul_l.constprop.0+0xd4>
 8001cfa:	1e69      	subs	r1, r5, #1
 8001cfc:	6011      	str	r1, [r2, #0]
 8001cfe:	e7f5      	b.n	8001cec <_strtoul_l.constprop.0+0xc4>
 8001d00:	08001e3b 	.word	0x08001e3b

08001d04 <_strtoul_r>:
 8001d04:	f7ff bf90 	b.w	8001c28 <_strtoul_l.constprop.0>

08001d08 <_malloc_usable_size_r>:
 8001d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d0c:	1f18      	subs	r0, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bfbc      	itt	lt
 8001d12:	580b      	ldrlt	r3, [r1, r0]
 8001d14:	18c0      	addlt	r0, r0, r3
 8001d16:	4770      	bx	lr

08001d18 <_init>:
 8001d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1a:	bf00      	nop
 8001d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d1e:	bc08      	pop	{r3}
 8001d20:	469e      	mov	lr, r3
 8001d22:	4770      	bx	lr

08001d24 <_fini>:
 8001d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d26:	bf00      	nop
 8001d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d2a:	bc08      	pop	{r3}
 8001d2c:	469e      	mov	lr, r3
 8001d2e:	4770      	bx	lr
