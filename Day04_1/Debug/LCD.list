
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000400  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000588  08000588  00001588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005b0  080005b0  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080005b0  080005b0  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005b0  080005b0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b0  080005b0  000015b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005b4  080005b4  000015b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005b8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c0f  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000372  00000000  00000000  00002c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000084  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018036  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001006  00000000  00000000  0001b132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b8b3  00000000  00000000  0001c138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a79eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001c4  00000000  00000000  000a7a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a7bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  000a7c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000570 	.word	0x08000570

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000570 	.word	0x08000570

080001c8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	SystemInit();
 80001cc:	f000 f94c 	bl	8000468 <SystemInit>
	LCDinit();
 80001d0:	f000 f8b6 	bl	8000340 <LCDinit>

	LCDputs(LCD_line1,"      Let's     ");
 80001d4:	4905      	ldr	r1, [pc, #20]	@ (80001ec <main+0x24>)
 80001d6:	2080      	movs	r0, #128	@ 0x80
 80001d8:	f000 f922 	bl	8000420 <LCDputs>
	LCDputs(LCD_line2," The Game Begin ");
 80001dc:	4904      	ldr	r1, [pc, #16]	@ (80001f0 <main+0x28>)
 80001de:	20c0      	movs	r0, #192	@ 0xc0
 80001e0:	f000 f91e 	bl	8000420 <LCDputs>



	return 0;
 80001e4:	2300      	movs	r3, #0
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	08000588 	.word	0x08000588
 80001f0:	0800059c 	.word	0x0800059c

080001f4 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001f4:	b480      	push	{r7}
 80001f6:	b085      	sub	sp, #20
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000238 <DelayMs+0x44>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000202:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <DelayMs+0x48>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a0e      	ldr	r2, [pc, #56]	@ (8000240 <DelayMs+0x4c>)
 8000208:	fba2 2303 	umull	r2, r3, r2, r3
 800020c:	099b      	lsrs	r3, r3, #6
 800020e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	68ba      	ldr	r2, [r7, #8]
 8000214:	fb02 f303 	mul.w	r3, r2, r3
 8000218:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800021a:	bf00      	nop
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <DelayMs+0x44>)
 800021e:	685a      	ldr	r2, [r3, #4]
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	1ad2      	subs	r2, r2, r3
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	429a      	cmp	r2, r3
 8000228:	d3f8      	bcc.n	800021c <DelayMs+0x28>
}
 800022a:	bf00      	nop
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	e0001000 	.word	0xe0001000
 800023c:	20000000 	.word	0x20000000
 8000240:	10624dd3 	.word	0x10624dd3

08000244 <LCDbusywait>:
 */

#include "mylcd.h"

void LCDbusywait(void)//this function is to check busyflag
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
	uint32_t state;
	//to make the D7 pin as input
	//#define LCD_BF LCD_D7(in mylcd.h)
	//to set MODER (mode register) as a General Purpose input (00)
	LCD_data_GPIO->MODER &= ~(BV(LCD_BF*2) | BV(LCD_BF*2+1));
 800024a:	4b10      	ldr	r3, [pc, #64]	@ (800028c <LCDbusywait+0x48>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a0f      	ldr	r2, [pc, #60]	@ (800028c <LCDbusywait+0x48>)
 8000250:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000254:	6013      	str	r3, [r2, #0]
	//to set RS = 0 as for command and instruction
	//to set RW = 1 for read mode
	//to set EN = 1
	//the data is to be fetch only when falling edge of EN
	//here BSRR (bit set/reset register) is used to set and reset the port
	LCD_ctr_GPIO->BSRR = BV(LCD_rs_clr) | BV(LCD_rw)| BV(LCD_en);
 8000256:	4b0d      	ldr	r3, [pc, #52]	@ (800028c <LCDbusywait+0x48>)
 8000258:	4a0d      	ldr	r2, [pc, #52]	@ (8000290 <LCDbusywait+0x4c>)
 800025a:	619a      	str	r2, [r3, #24]

	//to read data
	do
	{
		state = LCD_data_GPIO->IDR;
 800025c:	4b0b      	ldr	r3, [pc, #44]	@ (800028c <LCDbusywait+0x48>)
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	607b      	str	r3, [r7, #4]
		//this loop will run until busy flag is on
	}while((state & BV(LCD_BF)) !=0 );
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f003 0308 	and.w	r3, r3, #8
 8000268:	2b00      	cmp	r3, #0
 800026a:	d1f7      	bne.n	800025c <LCDbusywait+0x18>
	//we can write data on LCD
	//to write data on LCD
	//set RW = 0// #define LCD_rw_clr (LCD_rw+16)
	//set EN = 0 // falling edge....#define LCD_en_clr (LCD_en+16)
	//here BSRR (bit set/reset register) is used to set and reset the port
	LCD_ctr_GPIO->BSRR = BV(LCD_rw_clr) | BV(LCD_en_clr);
 800026c:	4b07      	ldr	r3, [pc, #28]	@ (800028c <LCDbusywait+0x48>)
 800026e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000272:	619a      	str	r2, [r3, #24]

	//to make the D7 pin as output
	//to set MODER (mode register) as a General Purpose output (01)
	LCD_data_GPIO->MODER |= BV(LCD_BF*2);
 8000274:	4b05      	ldr	r3, [pc, #20]	@ (800028c <LCDbusywait+0x48>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a04      	ldr	r2, [pc, #16]	@ (800028c <LCDbusywait+0x48>)
 800027a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800027e:	6013      	str	r3, [r2, #0]

}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40020c00 	.word	0x40020c00
 8000290:	002000c0 	.word	0x002000c0

08000294 <LCDwritenibble>:
void LCDwritenibble(uint8_t rs,uint8_t val)//this function is to set nibble because we set LCD to write 4-bit
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	460a      	mov	r2, r1
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	4613      	mov	r3, r2
 80002a2:	71bb      	strb	r3, [r7, #6]
	//if lCD is set for command
	//to write data make RS = 1 and RW = 0
	//if LCD in data mode do nothing with RS and make RW = 1
	if(rs == LCD_cmd)
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d104      	bne.n	80002b4 <LCDwritenibble+0x20>
		LCD_ctr_GPIO->BSRR = BV(LCD_rs_clr) | BV(LCD_rw_clr);
 80002aa:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <LCDwritenibble+0x5c>)
 80002ac:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80002b0:	619a      	str	r2, [r3, #24]
 80002b2:	e002      	b.n	80002ba <LCDwritenibble+0x26>
	else
		LCD_ctr_GPIO->BSRR =BV(LCD_rs) | BV(LCD_rw_clr);
 80002b4:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <LCDwritenibble+0x5c>)
 80002b6:	4a0f      	ldr	r2, [pc, #60]	@ (80002f4 <LCDwritenibble+0x60>)
 80002b8:	619a      	str	r2, [r3, #24]

	//to write 4 bit data on LCD
	//to make GPIO as output ODR (output Data register)
	LCD_data_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 80002ba:	4b0d      	ldr	r3, [pc, #52]	@ (80002f0 <LCDwritenibble+0x5c>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	4a0c      	ldr	r2, [pc, #48]	@ (80002f0 <LCDwritenibble+0x5c>)
 80002c0:	f023 030f 	bic.w	r3, r3, #15
 80002c4:	6153      	str	r3, [r2, #20]
	LCD_data_GPIO->ODR |= val << LCD_D4;
 80002c6:	4b0a      	ldr	r3, [pc, #40]	@ (80002f0 <LCDwritenibble+0x5c>)
 80002c8:	695a      	ldr	r2, [r3, #20]
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	4908      	ldr	r1, [pc, #32]	@ (80002f0 <LCDwritenibble+0x5c>)
 80002ce:	4313      	orrs	r3, r2
 80002d0:	614b      	str	r3, [r1, #20]

	//to make falling edge to fetch data
	LCD_ctr_GPIO->BSRR = BV(LCD_en);
 80002d2:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <LCDwritenibble+0x5c>)
 80002d4:	2280      	movs	r2, #128	@ 0x80
 80002d6:	619a      	str	r2, [r3, #24]
	DelayMs(1);
 80002d8:	2001      	movs	r0, #1
 80002da:	f7ff ff8b 	bl	80001f4 <DelayMs>
	LCD_ctr_GPIO->BSRR = BV(LCD_en_clr);
 80002de:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <LCDwritenibble+0x5c>)
 80002e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002e4:	619a      	str	r2, [r3, #24]

}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40020c00 	.word	0x40020c00
 80002f4:	00400020 	.word	0x00400020

080002f8 <LCDwrite>:
void LCDwrite(uint8_t rs,uint8_t val)//this function is to convert 8-bit to 2 4-bit for nibble
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	460a      	mov	r2, r1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	4613      	mov	r3, r2
 8000306:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val >> 4, low = val & 0x0F;
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	091b      	lsrs	r3, r3, #4
 800030c:	73fb      	strb	r3, [r7, #15]
 800030e:	79bb      	ldrb	r3, [r7, #6]
 8000310:	f003 030f 	and.w	r3, r3, #15
 8000314:	73bb      	strb	r3, [r7, #14]

	LCDwritenibble(rs,high);
 8000316:	7bfa      	ldrb	r2, [r7, #15]
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	4611      	mov	r1, r2
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ffb9 	bl	8000294 <LCDwritenibble>
	LCDwritenibble(rs,low);
 8000322:	7bba      	ldrb	r2, [r7, #14]
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	4611      	mov	r1, r2
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ffb3 	bl	8000294 <LCDwritenibble>
	LCDbusywait();
 800032e:	f7ff ff89 	bl	8000244 <LCDbusywait>
	DelayMs(3);
 8000332:	2003      	movs	r0, #3
 8000334:	f7ff ff5e 	bl	80001f4 <DelayMs>
}
 8000338:	bf00      	nop
 800033a:	3710      	adds	r7, #16
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <LCDinit>:
void LCDinit(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	DelayMs(50);
 8000344:	2032      	movs	r0, #50	@ 0x32
 8000346:	f7ff ff55 	bl	80001f4 <DelayMs>
	RCC->AHB1ENR |= BV(LCD_data_GPIO_en);
 800034a:	4b33      	ldr	r3, [pc, #204]	@ (8000418 <LCDinit+0xd8>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034e:	4a32      	ldr	r2, [pc, #200]	@ (8000418 <LCDinit+0xd8>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= BV(LCD_ctr_GPIO_en);
 8000356:	4b30      	ldr	r3, [pc, #192]	@ (8000418 <LCDinit+0xd8>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035a:	4a2f      	ldr	r2, [pc, #188]	@ (8000418 <LCDinit+0xd8>)
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	6313      	str	r3, [r2, #48]	@ 0x30

	LCD_data_GPIO->MODER &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1));
 8000362:	4b2e      	ldr	r3, [pc, #184]	@ (800041c <LCDinit+0xdc>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a2d      	ldr	r2, [pc, #180]	@ (800041c <LCDinit+0xdc>)
 8000368:	f023 03aa 	bic.w	r3, r3, #170	@ 0xaa
 800036c:	6013      	str	r3, [r2, #0]
	LCD_data_GPIO->MODER |= BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2);
 800036e:	4b2b      	ldr	r3, [pc, #172]	@ (800041c <LCDinit+0xdc>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a2a      	ldr	r2, [pc, #168]	@ (800041c <LCDinit+0xdc>)
 8000374:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000378:	6013      	str	r3, [r2, #0]
	LCD_data_GPIO->OSPEEDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2));
 800037a:	4b28      	ldr	r3, [pc, #160]	@ (800041c <LCDinit+0xdc>)
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	4a27      	ldr	r2, [pc, #156]	@ (800041c <LCDinit+0xdc>)
 8000380:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000384:	6093      	str	r3, [r2, #8]
	LCD_data_GPIO->PUPDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2));
 8000386:	4b25      	ldr	r3, [pc, #148]	@ (800041c <LCDinit+0xdc>)
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	4a24      	ldr	r2, [pc, #144]	@ (800041c <LCDinit+0xdc>)
 800038c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000390:	60d3      	str	r3, [r2, #12]
	LCD_data_GPIO->OTYPER &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 8000392:	4b22      	ldr	r3, [pc, #136]	@ (800041c <LCDinit+0xdc>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	4a21      	ldr	r2, [pc, #132]	@ (800041c <LCDinit+0xdc>)
 8000398:	f023 030f 	bic.w	r3, r3, #15
 800039c:	6053      	str	r3, [r2, #4]
	LCD_data_GPIO->BSRR = (BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 800039e:	4b1f      	ldr	r3, [pc, #124]	@ (800041c <LCDinit+0xdc>)
 80003a0:	220f      	movs	r2, #15
 80003a2:	619a      	str	r2, [r3, #24]

	LCD_ctr_GPIO->MODER &= ~(BV(LCD_rs*2+1) | BV(LCD_rw*2+1) | BV(LCD_en*2+1));
 80003a4:	4b1d      	ldr	r3, [pc, #116]	@ (800041c <LCDinit+0xdc>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a1c      	ldr	r2, [pc, #112]	@ (800041c <LCDinit+0xdc>)
 80003aa:	f423 4328 	bic.w	r3, r3, #43008	@ 0xa800
 80003ae:	6013      	str	r3, [r2, #0]
	LCD_ctr_GPIO->MODER |= (BV(LCD_rs*2) | BV(LCD_rw*2) | BV(LCD_en*2));
 80003b0:	4b1a      	ldr	r3, [pc, #104]	@ (800041c <LCDinit+0xdc>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a19      	ldr	r2, [pc, #100]	@ (800041c <LCDinit+0xdc>)
 80003b6:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 80003ba:	6013      	str	r3, [r2, #0]
	LCD_ctr_GPIO->OSPEEDR &= ~(BV(LCD_rs*2+1) | BV(LCD_rw*2+1) | BV(LCD_en*2+1) | BV(LCD_rs*2) | BV(LCD_rw*2) | BV(LCD_en*2));
 80003bc:	4b17      	ldr	r3, [pc, #92]	@ (800041c <LCDinit+0xdc>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	4a16      	ldr	r2, [pc, #88]	@ (800041c <LCDinit+0xdc>)
 80003c2:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80003c6:	6093      	str	r3, [r2, #8]
	LCD_ctr_GPIO->PUPDR &= ~(BV(LCD_rs*2+1) | BV(LCD_rw*2+1) | BV(LCD_en*2+1) | BV(LCD_rs*2) | BV(LCD_rw*2) | BV(LCD_en*2));
 80003c8:	4b14      	ldr	r3, [pc, #80]	@ (800041c <LCDinit+0xdc>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	4a13      	ldr	r2, [pc, #76]	@ (800041c <LCDinit+0xdc>)
 80003ce:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80003d2:	60d3      	str	r3, [r2, #12]
	LCD_data_GPIO->OTYPER &= ~(BV(LCD_rs) | BV(LCD_rw) | BV(LCD_en));
 80003d4:	4b11      	ldr	r3, [pc, #68]	@ (800041c <LCDinit+0xdc>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	4a10      	ldr	r2, [pc, #64]	@ (800041c <LCDinit+0xdc>)
 80003da:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80003de:	6053      	str	r3, [r2, #4]

	LCD_ctr_GPIO->BSRR = (BV(LCD_rs_clr) | BV(LCD_rw_clr) | BV(LCD_en_clr));
 80003e0:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <LCDinit+0xdc>)
 80003e2:	f44f 0260 	mov.w	r2, #14680064	@ 0xe00000
 80003e6:	619a      	str	r2, [r3, #24]

	DelayMs(200);
 80003e8:	20c8      	movs	r0, #200	@ 0xc8
 80003ea:	f7ff ff03 	bl	80001f4 <DelayMs>


	LCDwrite(LCD_cmd,LCD_fn_set);
 80003ee:	2128      	movs	r1, #40	@ 0x28
 80003f0:	2000      	movs	r0, #0
 80003f2:	f7ff ff81 	bl	80002f8 <LCDwrite>

	LCDwrite(LCD_cmd,LCD_disp_ON);
 80003f6:	210f      	movs	r1, #15
 80003f8:	2000      	movs	r0, #0
 80003fa:	f7ff ff7d 	bl	80002f8 <LCDwrite>

	LCDwrite(LCD_cmd,LCD_entry_mode);
 80003fe:	2180      	movs	r1, #128	@ 0x80
 8000400:	2000      	movs	r0, #0
 8000402:	f7ff ff79 	bl	80002f8 <LCDwrite>

	LCDwrite(LCD_cmd,LCD_clear);
 8000406:	2101      	movs	r1, #1
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff ff75 	bl	80002f8 <LCDwrite>

	DelayMs(200);
 800040e:	20c8      	movs	r0, #200	@ 0xc8
 8000410:	f7ff fef0 	bl	80001f4 <DelayMs>

}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40023800 	.word	0x40023800
 800041c:	40020c00 	.word	0x40020c00

08000420 <LCDputs>:

void LCDputs(uint8_t line,char str[])
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	6039      	str	r1, [r7, #0]
 800042a:	71fb      	strb	r3, [r7, #7]
	int i;

	LCDwrite(LCD_cmd,line);
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	4619      	mov	r1, r3
 8000430:	2000      	movs	r0, #0
 8000432:	f7ff ff61 	bl	80002f8 <LCDwrite>

	for(i=0;str[i] != '\0';i++)
 8000436:	2300      	movs	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	e00a      	b.n	8000452 <LCDputs+0x32>
		LCDwrite(LCD_data,str[i]);
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	4413      	add	r3, r2
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	4619      	mov	r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	f7ff ff56 	bl	80002f8 <LCDwrite>
	for(i=0;str[i] != '\0';i++)
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3301      	adds	r3, #1
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	683a      	ldr	r2, [r7, #0]
 8000456:	4413      	add	r3, r2
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d1ee      	bne.n	800043c <LCDputs+0x1c>
}
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  DWT_Init();
 800046c:	f000 f802 	bl	8000474 <DWT_Init>
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}

08000474 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <DWT_Init+0x58>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4a13      	ldr	r2, [pc, #76]	@ (80004cc <DWT_Init+0x58>)
 800047e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000482:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <DWT_Init+0x58>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a10      	ldr	r2, [pc, #64]	@ (80004cc <DWT_Init+0x58>)
 800048a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800048e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000490:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <DWT_Init+0x5c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a0e      	ldr	r2, [pc, #56]	@ (80004d0 <DWT_Init+0x5c>)
 8000496:	f023 0301 	bic.w	r3, r3, #1
 800049a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800049c:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <DWT_Init+0x5c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a0b      	ldr	r2, [pc, #44]	@ (80004d0 <DWT_Init+0x5c>)
 80004a2:	f043 0301 	orr.w	r3, r3, #1
 80004a6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80004a8:	4b09      	ldr	r3, [pc, #36]	@ (80004d0 <DWT_Init+0x5c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004ae:	bf00      	nop
    __ASM volatile ("NOP");
 80004b0:	bf00      	nop
    __ASM volatile ("NOP");
 80004b2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80004b4:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <DWT_Init+0x5c>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	bf0c      	ite	eq
 80004bc:	2301      	moveq	r3, #1
 80004be:	2300      	movne	r3, #0
 80004c0:	b2db      	uxtb	r3, r3
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	e000edf0 	.word	0xe000edf0
 80004d0:	e0001000 	.word	0xe0001000

080004d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d4:	480d      	ldr	r0, [pc, #52]	@ (800050c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d8:	f7ff ffc6 	bl	8000468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480c      	ldr	r0, [pc, #48]	@ (8000510 <LoopForever+0x6>)
  ldr r1, =_edata
 80004de:	490d      	ldr	r1, [pc, #52]	@ (8000514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000518 <LoopForever+0xe>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a0a      	ldr	r2, [pc, #40]	@ (800051c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000520 <LoopForever+0x16>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000502:	f000 f811 	bl	8000528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000506:	f7ff fe5f 	bl	80001c8 <main>

0800050a <LoopForever>:

LoopForever:
  b LoopForever
 800050a:	e7fe      	b.n	800050a <LoopForever>
  ldr   r0, =_estack
 800050c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000514:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000518:	080005b8 	.word	0x080005b8
  ldr r2, =_sbss
 800051c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000520:	20000020 	.word	0x20000020

08000524 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC_IRQHandler>
	...

08000528 <__libc_init_array>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	4d0d      	ldr	r5, [pc, #52]	@ (8000560 <__libc_init_array+0x38>)
 800052c:	4c0d      	ldr	r4, [pc, #52]	@ (8000564 <__libc_init_array+0x3c>)
 800052e:	1b64      	subs	r4, r4, r5
 8000530:	10a4      	asrs	r4, r4, #2
 8000532:	2600      	movs	r6, #0
 8000534:	42a6      	cmp	r6, r4
 8000536:	d109      	bne.n	800054c <__libc_init_array+0x24>
 8000538:	4d0b      	ldr	r5, [pc, #44]	@ (8000568 <__libc_init_array+0x40>)
 800053a:	4c0c      	ldr	r4, [pc, #48]	@ (800056c <__libc_init_array+0x44>)
 800053c:	f000 f818 	bl	8000570 <_init>
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	10a4      	asrs	r4, r4, #2
 8000544:	2600      	movs	r6, #0
 8000546:	42a6      	cmp	r6, r4
 8000548:	d105      	bne.n	8000556 <__libc_init_array+0x2e>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000550:	4798      	blx	r3
 8000552:	3601      	adds	r6, #1
 8000554:	e7ee      	b.n	8000534 <__libc_init_array+0xc>
 8000556:	f855 3b04 	ldr.w	r3, [r5], #4
 800055a:	4798      	blx	r3
 800055c:	3601      	adds	r6, #1
 800055e:	e7f2      	b.n	8000546 <__libc_init_array+0x1e>
 8000560:	080005b0 	.word	0x080005b0
 8000564:	080005b0 	.word	0x080005b0
 8000568:	080005b0 	.word	0x080005b0
 800056c:	080005b4 	.word	0x080005b4

08000570 <_init>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr

0800057c <_fini>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	bf00      	nop
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr
