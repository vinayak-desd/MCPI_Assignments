
LCD_shift.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000488  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000610  08000610  00001610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000638  08000638  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000638  08000638  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000638  08000638  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000638  08000638  00001638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800063c  0800063c  0000163c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000640  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ddc  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000414  00000000  00000000  00002e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00003220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008a  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001803c  00000000  00000000  0000337a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001058  00000000  00000000  0001b3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b907  00000000  00000000  0001c40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a7d15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001f4  00000000  00000000  000a7d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a7f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  000a7f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005f8 	.word	0x080005f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080005f8 	.word	0x080005f8

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	SystemInit();
 800021e:	f000 f967 	bl	80004f0 <SystemInit>
	LCDinit();
 8000222:	f000 f8cd 	bl	80003c0 <LCDinit>

	LCDputs(LCD_line1,"      Let's     ");
 8000226:	4911      	ldr	r1, [pc, #68]	@ (800026c <main+0x54>)
 8000228:	2080      	movs	r0, #128	@ 0x80
 800022a:	f000 f93d 	bl	80004a8 <LCDputs>
	LCDputs(LCD_line2," The Game Begin ");
 800022e:	4910      	ldr	r1, [pc, #64]	@ (8000270 <main+0x58>)
 8000230:	20c0      	movs	r0, #192	@ 0xc0
 8000232:	f000 f939 	bl	80004a8 <LCDputs>

	uint32_t count=16;
 8000236:	2310      	movs	r3, #16
 8000238:	607b      	str	r3, [r7, #4]
	//for(int i=0; i<16; i++)
		while(count !=0){
 800023a:	e00a      	b.n	8000252 <main+0x3a>
			DelayMs(1000);
 800023c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000240:	f7ff ffc2 	bl	80001c8 <DelayMs>
			LCDwrite(LCD_cmd, LCD_disp_sft);
 8000244:	2118      	movs	r1, #24
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f896 	bl	8000378 <LCDwrite>
			count--;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	3b01      	subs	r3, #1
 8000250:	607b      	str	r3, [r7, #4]
		while(count !=0){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d1f1      	bne.n	800023c <main+0x24>
		}

	LCDwrite(LCD_cmd,LCD_clear);
 8000258:	2101      	movs	r1, #1
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f88c 	bl	8000378 <LCDwrite>

	return 0;
 8000260:	2300      	movs	r3, #0
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	08000610 	.word	0x08000610
 8000270:	08000624 	.word	0x08000624

08000274 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800027c:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x44>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000282:	4b0e      	ldr	r3, [pc, #56]	@ (80002bc <DelayMs+0x48>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a0e      	ldr	r2, [pc, #56]	@ (80002c0 <DelayMs+0x4c>)
 8000288:	fba2 2303 	umull	r2, r3, r2, r3
 800028c:	099b      	lsrs	r3, r3, #6
 800028e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	fb02 f303 	mul.w	r3, r2, r3
 8000298:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800029a:	bf00      	nop
 800029c:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <DelayMs+0x44>)
 800029e:	685a      	ldr	r2, [r3, #4]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	1ad2      	subs	r2, r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d3f8      	bcc.n	800029c <DelayMs+0x28>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e0001000 	.word	0xe0001000
 80002bc:	20000000 	.word	0x20000000
 80002c0:	10624dd3 	.word	0x10624dd3

080002c4 <LCDbusywait>:
 */

#include "mylcd.h"

void LCDbusywait(void)//this function is to check busyflag
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
	uint32_t state;
	//to make the D7 pin as input
	//#define LCD_BF LCD_D7(in mylcd.h)
	//to set MODER (mode register) as a General Purpose input (00)
	LCD_data_GPIO->MODER &= ~(BV(LCD_BF*2) | BV(LCD_BF*2+1));
 80002ca:	4b10      	ldr	r3, [pc, #64]	@ (800030c <LCDbusywait+0x48>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a0f      	ldr	r2, [pc, #60]	@ (800030c <LCDbusywait+0x48>)
 80002d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002d4:	6013      	str	r3, [r2, #0]
	//to set RS = 0 as for command and instruction
	//to set RW = 1 for read mode
	//to set EN = 1
	//the data is to be fetch only when falling edge of EN
	//here BSRR (bit set/reset register) is used to set and reset the port
	LCD_ctr_GPIO->BSRR = BV(LCD_rs_clr) | BV(LCD_rw)| BV(LCD_en);
 80002d6:	4b0d      	ldr	r3, [pc, #52]	@ (800030c <LCDbusywait+0x48>)
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <LCDbusywait+0x4c>)
 80002da:	619a      	str	r2, [r3, #24]

	//to read data
	do
	{
		state = LCD_data_GPIO->IDR;
 80002dc:	4b0b      	ldr	r3, [pc, #44]	@ (800030c <LCDbusywait+0x48>)
 80002de:	691b      	ldr	r3, [r3, #16]
 80002e0:	607b      	str	r3, [r7, #4]
		//this loop will run until busy flag is on
	}while((state & BV(LCD_BF)) !=0 );
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1f7      	bne.n	80002dc <LCDbusywait+0x18>
	//we can write data on LCD
	//to write data on LCD
	//set RW = 0// #define LCD_rw_clr (LCD_rw+16)
	//set EN = 0 // falling edge....#define LCD_en_clr (LCD_en+16)
	//here BSRR (bit set/reset register) is used to set and reset the port
	LCD_ctr_GPIO->BSRR = BV(LCD_rw_clr) | BV(LCD_en_clr);
 80002ec:	4b07      	ldr	r3, [pc, #28]	@ (800030c <LCDbusywait+0x48>)
 80002ee:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80002f2:	619a      	str	r2, [r3, #24]

	//to make the D7 pin as output
	//to set MODER (mode register) as a General Purpose output (01)
	LCD_data_GPIO->MODER |= BV(LCD_BF*2);
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <LCDbusywait+0x48>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a04      	ldr	r2, [pc, #16]	@ (800030c <LCDbusywait+0x48>)
 80002fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002fe:	6013      	str	r3, [r2, #0]

}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40020c00 	.word	0x40020c00
 8000310:	002000c0 	.word	0x002000c0

08000314 <LCDwritenibble>:
void LCDwritenibble(uint8_t rs,uint8_t val)//this function is to set nibble because we set LCD to write 4-bit
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	460a      	mov	r2, r1
 800031e:	71fb      	strb	r3, [r7, #7]
 8000320:	4613      	mov	r3, r2
 8000322:	71bb      	strb	r3, [r7, #6]
	//if lCD is set for command
	//to write data make RS = 1 and RW = 0
	//if LCD in data mode do nothing with RS and make RW = 1
	if(rs == LCD_cmd)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d104      	bne.n	8000334 <LCDwritenibble+0x20>
		LCD_ctr_GPIO->BSRR = BV(LCD_rs_clr) | BV(LCD_rw_clr);
 800032a:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <LCDwritenibble+0x5c>)
 800032c:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000330:	619a      	str	r2, [r3, #24]
 8000332:	e002      	b.n	800033a <LCDwritenibble+0x26>
	else
		LCD_ctr_GPIO->BSRR =BV(LCD_rs) | BV(LCD_rw_clr);
 8000334:	4b0e      	ldr	r3, [pc, #56]	@ (8000370 <LCDwritenibble+0x5c>)
 8000336:	4a0f      	ldr	r2, [pc, #60]	@ (8000374 <LCDwritenibble+0x60>)
 8000338:	619a      	str	r2, [r3, #24]

	//to write 4 bit data on LCD
	//to make GPIO as output ODR (output Data register)
	LCD_data_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 800033a:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <LCDwritenibble+0x5c>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a0c      	ldr	r2, [pc, #48]	@ (8000370 <LCDwritenibble+0x5c>)
 8000340:	f023 030f 	bic.w	r3, r3, #15
 8000344:	6153      	str	r3, [r2, #20]
	LCD_data_GPIO->ODR |= val << LCD_D4;
 8000346:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <LCDwritenibble+0x5c>)
 8000348:	695a      	ldr	r2, [r3, #20]
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	4908      	ldr	r1, [pc, #32]	@ (8000370 <LCDwritenibble+0x5c>)
 800034e:	4313      	orrs	r3, r2
 8000350:	614b      	str	r3, [r1, #20]

	//to make falling edge to fetch data
	LCD_ctr_GPIO->BSRR = BV(LCD_en);
 8000352:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <LCDwritenibble+0x5c>)
 8000354:	2280      	movs	r2, #128	@ 0x80
 8000356:	619a      	str	r2, [r3, #24]
	DelayMs(1);
 8000358:	2001      	movs	r0, #1
 800035a:	f7ff ff8b 	bl	8000274 <DelayMs>
	LCD_ctr_GPIO->BSRR = BV(LCD_en_clr);
 800035e:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <LCDwritenibble+0x5c>)
 8000360:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000364:	619a      	str	r2, [r3, #24]

}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40020c00 	.word	0x40020c00
 8000374:	00400020 	.word	0x00400020

08000378 <LCDwrite>:
void LCDwrite(uint8_t rs,uint8_t val)//this function is to convert 8-bit to 2 4-bit for nibble
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	460a      	mov	r2, r1
 8000382:	71fb      	strb	r3, [r7, #7]
 8000384:	4613      	mov	r3, r2
 8000386:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val >> 4, low = val & 0x0F;
 8000388:	79bb      	ldrb	r3, [r7, #6]
 800038a:	091b      	lsrs	r3, r3, #4
 800038c:	73fb      	strb	r3, [r7, #15]
 800038e:	79bb      	ldrb	r3, [r7, #6]
 8000390:	f003 030f 	and.w	r3, r3, #15
 8000394:	73bb      	strb	r3, [r7, #14]

	LCDwritenibble(rs,high);
 8000396:	7bfa      	ldrb	r2, [r7, #15]
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	4611      	mov	r1, r2
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ffb9 	bl	8000314 <LCDwritenibble>
	LCDwritenibble(rs,low);
 80003a2:	7bba      	ldrb	r2, [r7, #14]
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	4611      	mov	r1, r2
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ffb3 	bl	8000314 <LCDwritenibble>
	LCDbusywait();
 80003ae:	f7ff ff89 	bl	80002c4 <LCDbusywait>
	DelayMs(3);
 80003b2:	2003      	movs	r0, #3
 80003b4:	f7ff ff5e 	bl	8000274 <DelayMs>
}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <LCDinit>:
void LCDinit(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	DelayMs(50);
 80003c4:	2032      	movs	r0, #50	@ 0x32
 80003c6:	f7ff ff55 	bl	8000274 <DelayMs>
	RCC->AHB1ENR |= BV(LCD_data_GPIO_en);
 80003ca:	4b35      	ldr	r3, [pc, #212]	@ (80004a0 <LCDinit+0xe0>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ce:	4a34      	ldr	r2, [pc, #208]	@ (80004a0 <LCDinit+0xe0>)
 80003d0:	f043 0308 	orr.w	r3, r3, #8
 80003d4:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= BV(LCD_ctr_GPIO_en);
 80003d6:	4b32      	ldr	r3, [pc, #200]	@ (80004a0 <LCDinit+0xe0>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003da:	4a31      	ldr	r2, [pc, #196]	@ (80004a0 <LCDinit+0xe0>)
 80003dc:	f043 0308 	orr.w	r3, r3, #8
 80003e0:	6313      	str	r3, [r2, #48]	@ 0x30

	LCD_data_GPIO->MODER &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1));
 80003e2:	4b30      	ldr	r3, [pc, #192]	@ (80004a4 <LCDinit+0xe4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a2f      	ldr	r2, [pc, #188]	@ (80004a4 <LCDinit+0xe4>)
 80003e8:	f023 03aa 	bic.w	r3, r3, #170	@ 0xaa
 80003ec:	6013      	str	r3, [r2, #0]
	LCD_data_GPIO->MODER |= BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2);
 80003ee:	4b2d      	ldr	r3, [pc, #180]	@ (80004a4 <LCDinit+0xe4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a2c      	ldr	r2, [pc, #176]	@ (80004a4 <LCDinit+0xe4>)
 80003f4:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80003f8:	6013      	str	r3, [r2, #0]
	LCD_data_GPIO->OSPEEDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2));
 80003fa:	4b2a      	ldr	r3, [pc, #168]	@ (80004a4 <LCDinit+0xe4>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	4a29      	ldr	r2, [pc, #164]	@ (80004a4 <LCDinit+0xe4>)
 8000400:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000404:	6093      	str	r3, [r2, #8]
	LCD_data_GPIO->PUPDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2));
 8000406:	4b27      	ldr	r3, [pc, #156]	@ (80004a4 <LCDinit+0xe4>)
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	4a26      	ldr	r2, [pc, #152]	@ (80004a4 <LCDinit+0xe4>)
 800040c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000410:	60d3      	str	r3, [r2, #12]
	LCD_data_GPIO->OTYPER &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 8000412:	4b24      	ldr	r3, [pc, #144]	@ (80004a4 <LCDinit+0xe4>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	4a23      	ldr	r2, [pc, #140]	@ (80004a4 <LCDinit+0xe4>)
 8000418:	f023 030f 	bic.w	r3, r3, #15
 800041c:	6053      	str	r3, [r2, #4]
	LCD_data_GPIO->BSRR = (BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <LCDinit+0xe4>)
 8000420:	220f      	movs	r2, #15
 8000422:	619a      	str	r2, [r3, #24]

	LCD_ctr_GPIO->MODER &= ~(BV(LCD_rs*2+1) | BV(LCD_rw*2+1) | BV(LCD_en*2+1));
 8000424:	4b1f      	ldr	r3, [pc, #124]	@ (80004a4 <LCDinit+0xe4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a1e      	ldr	r2, [pc, #120]	@ (80004a4 <LCDinit+0xe4>)
 800042a:	f423 4328 	bic.w	r3, r3, #43008	@ 0xa800
 800042e:	6013      	str	r3, [r2, #0]
	LCD_ctr_GPIO->MODER |= (BV(LCD_rs*2) | BV(LCD_rw*2) | BV(LCD_en*2));
 8000430:	4b1c      	ldr	r3, [pc, #112]	@ (80004a4 <LCDinit+0xe4>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a1b      	ldr	r2, [pc, #108]	@ (80004a4 <LCDinit+0xe4>)
 8000436:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 800043a:	6013      	str	r3, [r2, #0]
	LCD_ctr_GPIO->OSPEEDR &= ~(BV(LCD_rs*2+1) | BV(LCD_rw*2+1) | BV(LCD_en*2+1) | BV(LCD_rs*2) | BV(LCD_rw*2) | BV(LCD_en*2));
 800043c:	4b19      	ldr	r3, [pc, #100]	@ (80004a4 <LCDinit+0xe4>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <LCDinit+0xe4>)
 8000442:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000446:	6093      	str	r3, [r2, #8]
	LCD_ctr_GPIO->PUPDR &= ~(BV(LCD_rs*2+1) | BV(LCD_rw*2+1) | BV(LCD_en*2+1) | BV(LCD_rs*2) | BV(LCD_rw*2) | BV(LCD_en*2));
 8000448:	4b16      	ldr	r3, [pc, #88]	@ (80004a4 <LCDinit+0xe4>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	4a15      	ldr	r2, [pc, #84]	@ (80004a4 <LCDinit+0xe4>)
 800044e:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000452:	60d3      	str	r3, [r2, #12]
	LCD_data_GPIO->OTYPER &= ~(BV(LCD_rs) | BV(LCD_rw) | BV(LCD_en));
 8000454:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <LCDinit+0xe4>)
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	4a12      	ldr	r2, [pc, #72]	@ (80004a4 <LCDinit+0xe4>)
 800045a:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800045e:	6053      	str	r3, [r2, #4]

	LCD_ctr_GPIO->BSRR = (BV(LCD_rs_clr) | BV(LCD_rw_clr) | BV(LCD_en_clr));
 8000460:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <LCDinit+0xe4>)
 8000462:	f44f 0260 	mov.w	r2, #14680064	@ 0xe00000
 8000466:	619a      	str	r2, [r3, #24]

	DelayMs(200);
 8000468:	20c8      	movs	r0, #200	@ 0xc8
 800046a:	f7ff ff03 	bl	8000274 <DelayMs>


	LCDwrite(LCD_cmd,LCD_fn_set);
 800046e:	2128      	movs	r1, #40	@ 0x28
 8000470:	2000      	movs	r0, #0
 8000472:	f7ff ff81 	bl	8000378 <LCDwrite>

	LCDwrite(LCD_cmd,LCD_disp_ON);
 8000476:	210f      	movs	r1, #15
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff7d 	bl	8000378 <LCDwrite>

	LCDwrite(LCD_cmd,LCD_entry_mode);
 800047e:	2106      	movs	r1, #6
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff ff79 	bl	8000378 <LCDwrite>

	LCDwrite(LCD_cmd, LCD_disp_sft);
 8000486:	2118      	movs	r1, #24
 8000488:	2000      	movs	r0, #0
 800048a:	f7ff ff75 	bl	8000378 <LCDwrite>
	LCDwrite(LCD_cmd,LCD_clear);
 800048e:	2101      	movs	r1, #1
 8000490:	2000      	movs	r0, #0
 8000492:	f7ff ff71 	bl	8000378 <LCDwrite>

	DelayMs(200);
 8000496:	20c8      	movs	r0, #200	@ 0xc8
 8000498:	f7ff feec 	bl	8000274 <DelayMs>

}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40023800 	.word	0x40023800
 80004a4:	40020c00 	.word	0x40020c00

080004a8 <LCDputs>:

void LCDputs(uint8_t line,char str[])
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	6039      	str	r1, [r7, #0]
 80004b2:	71fb      	strb	r3, [r7, #7]
	int i;

	LCDwrite(LCD_cmd,line);
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	4619      	mov	r1, r3
 80004b8:	2000      	movs	r0, #0
 80004ba:	f7ff ff5d 	bl	8000378 <LCDwrite>

	for(i=0;str[i] != '\0';i++)
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	e00a      	b.n	80004da <LCDputs+0x32>
		LCDwrite(LCD_data,str[i]);
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	4413      	add	r3, r2
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	4619      	mov	r1, r3
 80004ce:	2001      	movs	r0, #1
 80004d0:	f7ff ff52 	bl	8000378 <LCDwrite>
	for(i=0;str[i] != '\0';i++)
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	3301      	adds	r3, #1
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	4413      	add	r3, r2
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d1ee      	bne.n	80004c4 <LCDputs+0x1c>
}
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  DWT_Init();
 80004f4:	f000 f802 	bl	80004fc <DWT_Init>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000500:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <DWT_Init+0x58>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	4a13      	ldr	r2, [pc, #76]	@ (8000554 <DWT_Init+0x58>)
 8000506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800050a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800050c:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <DWT_Init+0x58>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <DWT_Init+0x58>)
 8000512:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000516:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <DWT_Init+0x5c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <DWT_Init+0x5c>)
 800051e:	f023 0301 	bic.w	r3, r3, #1
 8000522:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <DWT_Init+0x5c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	@ (8000558 <DWT_Init+0x5c>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000530:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <DWT_Init+0x5c>)
 8000532:	2200      	movs	r2, #0
 8000534:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000536:	bf00      	nop
    __ASM volatile ("NOP");
 8000538:	bf00      	nop
    __ASM volatile ("NOP");
 800053a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <DWT_Init+0x5c>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2b00      	cmp	r3, #0
 8000542:	bf0c      	ite	eq
 8000544:	2301      	moveq	r3, #1
 8000546:	2300      	movne	r3, #0
 8000548:	b2db      	uxtb	r3, r3
}
 800054a:	4618      	mov	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000edf0 	.word	0xe000edf0
 8000558:	e0001000 	.word	0xe0001000

0800055c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800055c:	480d      	ldr	r0, [pc, #52]	@ (8000594 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000560:	f7ff ffc6 	bl	80004f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480c      	ldr	r0, [pc, #48]	@ (8000598 <LoopForever+0x6>)
  ldr r1, =_edata
 8000566:	490d      	ldr	r1, [pc, #52]	@ (800059c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000568:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <LoopForever+0xe>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800057c:	4c0a      	ldr	r4, [pc, #40]	@ (80005a8 <LoopForever+0x16>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800058a:	f000 f811 	bl	80005b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058e:	f7ff fe43 	bl	8000218 <main>

08000592 <LoopForever>:

LoopForever:
  b LoopForever
 8000592:	e7fe      	b.n	8000592 <LoopForever>
  ldr   r0, =_estack
 8000594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005a0:	08000640 	.word	0x08000640
  ldr r2, =_sbss
 80005a4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005a8:	20000020 	.word	0x20000020

080005ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC_IRQHandler>
	...

080005b0 <__libc_init_array>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	4d0d      	ldr	r5, [pc, #52]	@ (80005e8 <__libc_init_array+0x38>)
 80005b4:	4c0d      	ldr	r4, [pc, #52]	@ (80005ec <__libc_init_array+0x3c>)
 80005b6:	1b64      	subs	r4, r4, r5
 80005b8:	10a4      	asrs	r4, r4, #2
 80005ba:	2600      	movs	r6, #0
 80005bc:	42a6      	cmp	r6, r4
 80005be:	d109      	bne.n	80005d4 <__libc_init_array+0x24>
 80005c0:	4d0b      	ldr	r5, [pc, #44]	@ (80005f0 <__libc_init_array+0x40>)
 80005c2:	4c0c      	ldr	r4, [pc, #48]	@ (80005f4 <__libc_init_array+0x44>)
 80005c4:	f000 f818 	bl	80005f8 <_init>
 80005c8:	1b64      	subs	r4, r4, r5
 80005ca:	10a4      	asrs	r4, r4, #2
 80005cc:	2600      	movs	r6, #0
 80005ce:	42a6      	cmp	r6, r4
 80005d0:	d105      	bne.n	80005de <__libc_init_array+0x2e>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d8:	4798      	blx	r3
 80005da:	3601      	adds	r6, #1
 80005dc:	e7ee      	b.n	80005bc <__libc_init_array+0xc>
 80005de:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e2:	4798      	blx	r3
 80005e4:	3601      	adds	r6, #1
 80005e6:	e7f2      	b.n	80005ce <__libc_init_array+0x1e>
 80005e8:	08000638 	.word	0x08000638
 80005ec:	08000638 	.word	0x08000638
 80005f0:	08000638 	.word	0x08000638
 80005f4:	0800063c 	.word	0x0800063c

080005f8 <_init>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	bf00      	nop
 80005fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fe:	bc08      	pop	{r3}
 8000600:	469e      	mov	lr, r3
 8000602:	4770      	bx	lr

08000604 <_fini>:
 8000604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000606:	bf00      	nop
 8000608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060a:	bc08      	pop	{r3}
 800060c:	469e      	mov	lr, r3
 800060e:	4770      	bx	lr
